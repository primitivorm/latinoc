{"message":"cannot find value `Raw` in module `kw`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"src\\parser\\expr.rs","byte_start":37647,"byte_end":37650,"line_start":906,"line_end":906,"column_start":35,"column_end":38,"is_primary":true,"text":[{"text":"        if self.check_keyword(kw::Raw) && self.look_ahead(1, Token::is_mutability) {","highlight_start":35,"highlight_end":38}],"label":"not found in `kw`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing one of these items","code":null,"level":"help","spans":[{"file_name":"src\\parser\\expr.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::pat::{RecoverColon, RecoverComma, PARAM_EXPECTED};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::ast::BorrowKind::Raw;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"src\\parser\\expr.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::pat::{RecoverColon, RecoverComma, PARAM_EXPECTED};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::ast::StrStyle::Raw;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"src\\parser\\expr.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::pat::{RecoverColon, RecoverComma, PARAM_EXPECTED};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use rustc_ast::BorrowKind::Raw;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"src\\parser\\expr.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::pat::{RecoverColon, RecoverComma, PARAM_EXPECTED};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use rustc_ast::StrStyle::Raw;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"src\\parser\\expr.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::pat::{RecoverColon, RecoverComma, PARAM_EXPECTED};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use rustc_errors::emitter::Destination::Raw;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"src\\parser\\expr.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::pat::{RecoverColon, RecoverComma, PARAM_EXPECTED};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use rustc_errors::emitter::WritableDst::Raw;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"src\\parser\\expr.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::pat::{RecoverColon, RecoverComma, PARAM_EXPECTED};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use rustc_session::DiagnosticOutput::Raw;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"src\\parser\\expr.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::pat::{RecoverColon, RecoverComma, PARAM_EXPECTED};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use rustc_session::config::ExternDepSpec::Raw;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: cannot find value `Raw` in module `kw`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\parser\\expr.rs:906:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m906\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        if self.check_keyword(kw::Raw) && self.look_ahead(1, Token::is_mutability) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `kw`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing one of these items\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[38;5;10muse crate::ast::BorrowKind::Raw;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[38;5;10muse crate::ast::StrStyle::Raw;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[38;5;10muse rustc_ast::BorrowKind::Raw;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[38;5;10muse rustc_ast::StrStyle::Raw;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m      and 4 other candidates\u001b[0m\n\n"}
{"message":"cannot find value `Raw` in module `kw`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"src\\parser\\expr.rs","byte_start":37785,"byte_end":37788,"line_start":908,"line_end":908,"column_start":50,"column_end":53,"is_primary":true,"text":[{"text":"            let found_raw = self.eat_keyword(kw::Raw);","highlight_start":50,"highlight_end":53}],"label":"not found in `kw`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing one of these items","code":null,"level":"help","spans":[{"file_name":"src\\parser\\expr.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::pat::{RecoverColon, RecoverComma, PARAM_EXPECTED};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::ast::BorrowKind::Raw;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"src\\parser\\expr.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::pat::{RecoverColon, RecoverComma, PARAM_EXPECTED};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::ast::StrStyle::Raw;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"src\\parser\\expr.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::pat::{RecoverColon, RecoverComma, PARAM_EXPECTED};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use rustc_ast::BorrowKind::Raw;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"src\\parser\\expr.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::pat::{RecoverColon, RecoverComma, PARAM_EXPECTED};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use rustc_ast::StrStyle::Raw;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"src\\parser\\expr.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::pat::{RecoverColon, RecoverComma, PARAM_EXPECTED};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use rustc_errors::emitter::Destination::Raw;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"src\\parser\\expr.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::pat::{RecoverColon, RecoverComma, PARAM_EXPECTED};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use rustc_errors::emitter::WritableDst::Raw;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"src\\parser\\expr.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::pat::{RecoverColon, RecoverComma, PARAM_EXPECTED};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use rustc_session::DiagnosticOutput::Raw;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"src\\parser\\expr.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::pat::{RecoverColon, RecoverComma, PARAM_EXPECTED};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use rustc_session::config::ExternDepSpec::Raw;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: cannot find value `Raw` in module `kw`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\parser\\expr.rs:908:50\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m908\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            let found_raw = self.eat_keyword(kw::Raw);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `kw`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing one of these items\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[38;5;10muse crate::ast::BorrowKind::Raw;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[38;5;10muse crate::ast::StrStyle::Raw;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[38;5;10muse rustc_ast::BorrowKind::Raw;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[38;5;10muse rustc_ast::StrStyle::Raw;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m      and 4 other candidates\u001b[0m\n\n"}
{"message":"cannot find value `Macro` in module `kw`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"src\\parser\\item.rs","byte_start":11748,"byte_end":11753,"line_start":310,"line_end":310,"column_start":40,"column_end":45,"is_primary":true,"text":[{"text":"        } else if self.eat_keyword(kw::Macro) {","highlight_start":40,"highlight_end":45}],"label":"not found in `kw`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing one of these items","code":null,"level":"help","spans":[{"file_name":"src\\parser\\item.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::diagnostics::{dummy_arg, ConsumeClosingDelim, Error};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::parser::item::source_map::ExpnKind::Macro;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"src\\parser\\item.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::diagnostics::{dummy_arg, ConsumeClosingDelim, Error};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use rustc_span::ExpnKind::Macro;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: cannot find value `Macro` in module `kw`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\parser\\item.rs:310:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m310\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        } else if self.eat_keyword(kw::Macro) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `kw`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing one of these items\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[38;5;10muse crate::parser::item::source_map::ExpnKind::Macro;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[38;5;10muse rustc_span::ExpnKind::Macro;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"message":"cannot find value `Default` in module `kw`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"src\\parser\\item.rs","byte_start":28212,"byte_end":28219,"line_start":714,"line_end":714,"column_start":35,"column_end":42,"is_primary":true,"text":[{"text":"        if self.check_keyword(kw::Default)","highlight_start":35,"highlight_end":42}],"label":"not found in `kw`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing one of these items","code":null,"level":"help","spans":[{"file_name":"src\\parser\\item.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::diagnostics::{dummy_arg, ConsumeClosingDelim, Error};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::ast::expand::allocator::AllocatorKind::Default;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"src\\parser\\item.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::diagnostics::{dummy_arg, ConsumeClosingDelim, Error};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::parser::item::BlockCheckMode::Default;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"src\\parser\\item.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::diagnostics::{dummy_arg, ConsumeClosingDelim, Error};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::parser::item::Defaultness::Default;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"src\\parser\\item.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::diagnostics::{dummy_arg, ConsumeClosingDelim, Error};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::parser::item::FnRetTy::Default;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"src\\parser\\item.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::diagnostics::{dummy_arg, ConsumeClosingDelim, Error};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::parser::item::source_map::symbol::sym_generated::Default;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"src\\parser\\item.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::diagnostics::{dummy_arg, ConsumeClosingDelim, Error};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use rustc_ast::BlockCheckMode::Default;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"src\\parser\\item.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::diagnostics::{dummy_arg, ConsumeClosingDelim, Error};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use rustc_ast::Defaultness::Default;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"src\\parser\\item.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::diagnostics::{dummy_arg, ConsumeClosingDelim, Error};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use rustc_ast::FnRetTy::Default;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"src\\parser\\item.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::diagnostics::{dummy_arg, ConsumeClosingDelim, Error};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use rustc_ast::expand::allocator::AllocatorKind::Default;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"src\\parser\\item.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::diagnostics::{dummy_arg, ConsumeClosingDelim, Error};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use rustc_errors::emitter::HumanReadableErrorType::Default;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"src\\parser\\item.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::diagnostics::{dummy_arg, ConsumeClosingDelim, Error};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use rustc_session::DiagnosticOutput::Default;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"src\\parser\\item.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::diagnostics::{dummy_arg, ConsumeClosingDelim, Error};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use rustc_session::config::OptLevel::Default;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"src\\parser\\item.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::diagnostics::{dummy_arg, ConsumeClosingDelim, Error};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use rustc_span::sym::Default;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: cannot find value `Default` in module `kw`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\parser\\item.rs:714:35\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m714\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        if self.check_keyword(kw::Default)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `kw`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing one of these items\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[38;5;10muse crate::ast::expand::allocator::AllocatorKind::Default;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[38;5;10muse crate::parser::item::BlockCheckMode::Default;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[38;5;10muse crate::parser::item::Defaultness::Default;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[38;5;10muse crate::parser::item::FnRetTy::Default;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m      and 9 other candidates\u001b[0m\n\n"}
{"message":"cannot find value `Auto` in module `kw`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"src\\parser\\item.rs","byte_start":28660,"byte_end":28664,"line_start":727,"line_end":727,"column_start":32,"column_end":36,"is_primary":true,"text":[{"text":"        self.check_keyword(kw::Auto) /*&& self.is_keyword_ahead(1, &[kw::Trait])","highlight_start":32,"highlight_end":36}],"label":"not found in `kw`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing this unit variant","code":null,"level":"help","spans":[{"file_name":"src\\parser\\item.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::diagnostics::{dummy_arg, ConsumeClosingDelim, Error};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use rustc_errors::ColorConfig::Auto;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: cannot find value `Auto` in module `kw`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\parser\\item.rs:727:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m727\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        self.check_keyword(kw::Auto) /*&& self.is_keyword_ahead(1, &[kw::Trait])\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `kw`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this unit variant\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[38;5;10muse rustc_errors::ColorConfig::Auto;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"message":"cannot find value `Where` in module `kw`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"src\\parser\\item.rs","byte_start":52779,"byte_end":52784,"line_start":1410,"line_end":1410,"column_start":50,"column_end":55,"is_primary":true,"text":[{"text":"        let vdata = if self.token.is_keyword(kw::Where) {","highlight_start":50,"highlight_end":55}],"label":"not found in `kw`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: cannot find value `Where` in module `kw`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\parser\\item.rs:1410:50\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1410\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        let vdata = if self.token.is_keyword(kw::Where) {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `kw`\u001b[0m\n\n"}
{"message":"cannot find value `asyncness` in this scope","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"src\\parser\\item.rs","byte_start":81837,"byte_end":81846,"line_start":2130,"line_end":2130,"column_start":13,"column_end":22,"is_primary":true,"text":[{"text":"            asyncness,","highlight_start":13,"highlight_end":22}],"label":"not found in this scope","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: cannot find value `asyncness` in this scope\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\parser\\item.rs:2130:13\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2130\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            asyncness,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in this scope\u001b[0m\n\n"}
{"message":"cannot find value `Mut` in module `kw`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"src\\parser\\item.rs","byte_start":88899,"byte_end":88902,"line_start":2299,"line_end":2299,"column_start":61,"column_end":64,"is_primary":true,"text":[{"text":"            |this: &Self, n| this.is_keyword_ahead(n, &[kw::Mut]) && is_isolated_self(this, n + 1);","highlight_start":61,"highlight_end":64}],"label":"not found in `kw`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing one of these items","code":null,"level":"help","spans":[{"file_name":"src\\parser\\item.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::diagnostics::{dummy_arg, ConsumeClosingDelim, Error};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::parser::Mutability::Mut;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"src\\parser\\item.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::diagnostics::{dummy_arg, ConsumeClosingDelim, Error};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use rustc_ast::Mutability::Mut;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: cannot find value `Mut` in module `kw`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\parser\\item.rs:2299:61\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2299\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            |this: &Self, n| this.is_keyword_ahead(n, &[kw::Mut]) && is_isolated_self(this, n + 1);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                            \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `kw`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing one of these items\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[38;5;10muse crate::parser::Mutability::Mut;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[38;5;10muse rustc_ast::Mutability::Mut;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"message":"cannot find value `Mut` in module `kw`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"src\\parser\\item.rs","byte_start":93026,"byte_end":93029,"line_start":2396,"line_end":2396,"column_start":44,"column_end":47,"is_primary":true,"text":[{"text":"            _ if self.token.is_keyword(kw::Mut) => 1,","highlight_start":44,"highlight_end":47}],"label":"not found in `kw`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing one of these items","code":null,"level":"help","spans":[{"file_name":"src\\parser\\item.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::diagnostics::{dummy_arg, ConsumeClosingDelim, Error};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::parser::Mutability::Mut;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"src\\parser\\item.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::diagnostics::{dummy_arg, ConsumeClosingDelim, Error};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use rustc_ast::Mutability::Mut;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: cannot find value `Mut` in module `kw`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\parser\\item.rs:2396:44\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m2396\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            _ if self.token.is_keyword(kw::Mut) => 1,\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                           \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `kw`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing one of these items\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[38;5;10muse crate::parser::Mutability::Mut;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[38;5;10muse rustc_ast::Mutability::Mut;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"message":"cannot find value `Mut` in module `kw`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"src\\parser\\pat.rs","byte_start":18627,"byte_end":18630,"line_start":434,"line_end":434,"column_start":40,"column_end":43,"is_primary":true,"text":[{"text":"        } else if self.eat_keyword(kw::Mut) {","highlight_start":40,"highlight_end":43}],"label":"not found in `kw`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing one of these items","code":null,"level":"help","spans":[{"file_name":"src\\parser\\pat.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::{ForceCollect, Parser, PathStyle, TrailingToken};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::parser::Mutability::Mut;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"src\\parser\\pat.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::{ForceCollect, Parser, PathStyle, TrailingToken};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use rustc_ast::Mutability::Mut;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: cannot find value `Mut` in module `kw`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\parser\\pat.rs:434:40\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m434\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        } else if self.eat_keyword(kw::Mut) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `kw`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing one of these items\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[38;5;10muse crate::parser::Mutability::Mut;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[38;5;10muse rustc_ast::Mutability::Mut;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"message":"cannot find value `Mut` in module `kw`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"src\\parser\\pat.rs","byte_start":31311,"byte_end":31314,"line_start":755,"line_end":755,"column_start":36,"column_end":39,"is_primary":true,"text":[{"text":"        while self.eat_keyword(kw::Mut) {}","highlight_start":36,"highlight_end":39}],"label":"not found in `kw`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing one of these items","code":null,"level":"help","spans":[{"file_name":"src\\parser\\pat.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::{ForceCollect, Parser, PathStyle, TrailingToken};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::parser::Mutability::Mut;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"src\\parser\\pat.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::{ForceCollect, Parser, PathStyle, TrailingToken};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use rustc_ast::Mutability::Mut;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: cannot find value `Mut` in module `kw`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\parser\\pat.rs:755:36\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m755\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        while self.eat_keyword(kw::Mut) {}\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `kw`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing one of these items\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[38;5;10muse crate::parser::Mutability::Mut;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[38;5;10muse rustc_ast::Mutability::Mut;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"message":"cannot find value `Mut` in module `kw`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"src\\parser\\pat.rs","byte_start":48656,"byte_end":48659,"line_start":1195,"line_end":1195,"column_start":47,"column_end":50,"is_primary":true,"text":[{"text":"            let is_mut = self.eat_keyword(kw::Mut);","highlight_start":47,"highlight_end":50}],"label":"not found in `kw`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing one of these items","code":null,"level":"help","spans":[{"file_name":"src\\parser\\pat.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::{ForceCollect, Parser, PathStyle, TrailingToken};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::parser::Mutability::Mut;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"src\\parser\\pat.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::{ForceCollect, Parser, PathStyle, TrailingToken};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use rustc_ast::Mutability::Mut;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: cannot find value `Mut` in module `kw`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\parser\\pat.rs:1195:47\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1195\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            let is_mut = self.eat_keyword(kw::Mut);\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `kw`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing one of these items\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[38;5;10muse crate::parser::Mutability::Mut;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[38;5;10muse rustc_ast::Mutability::Mut;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"message":"cannot find value `Mut` in module `kw`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"src\\parser\\stmt.rs","byte_start":2421,"byte_end":2424,"line_start":62,"line_end":62,"column_start":52,"column_end":55,"is_primary":true,"text":[{"text":"        } else if self.is_kw_followed_by_ident(kw::Mut) {","highlight_start":52,"highlight_end":55}],"label":"not found in `kw`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing one of these items","code":null,"level":"help","spans":[{"file_name":"src\\parser\\stmt.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::attr::DEFAULT_INNER_ATTR_FORBIDDEN;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::parser::Mutability::Mut;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"src\\parser\\stmt.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::attr::DEFAULT_INNER_ATTR_FORBIDDEN;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use rustc_ast::Mutability::Mut;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: cannot find value `Mut` in module `kw`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\parser\\stmt.rs:62:52\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m62\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        } else if self.is_kw_followed_by_ident(kw::Mut) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `kw`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing one of these items\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[38;5;10muse crate::parser::Mutability::Mut;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[38;5;10muse rustc_ast::Mutability::Mut;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"message":"cannot find value `Auto` in module `kw`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"src\\parser\\stmt.rs","byte_start":2557,"byte_end":2561,"line_start":64,"line_end":64,"column_start":52,"column_end":56,"is_primary":true,"text":[{"text":"        } else if self.is_kw_followed_by_ident(kw::Auto) {","highlight_start":52,"highlight_end":56}],"label":"not found in `kw`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing this unit variant","code":null,"level":"help","spans":[{"file_name":"src\\parser\\stmt.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::attr::DEFAULT_INNER_ATTR_FORBIDDEN;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use rustc_errors::ColorConfig::Auto;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: cannot find value `Auto` in module `kw`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\parser\\stmt.rs:64:52\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m64\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        } else if self.is_kw_followed_by_ident(kw::Auto) {\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `kw`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this unit variant\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[38;5;10muse rustc_errors::ColorConfig::Auto;\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"message":"cannot find value `var` in module `sym`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"D:\\work\\lenguaje-latino\\latinoc\\compiler\\rustc_span\\src\\symbol.rs","byte_start":756,"byte_end":764,"line_start":23,"line_end":23,"column_start":1,"column_end":9,"is_primary":false,"text":[{"text":"symbols! {","highlight_start":1,"highlight_end":9}],"label":"similarly named constant `val` defined here","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"D:\\work\\lenguaje-latino\\latinoc\\compiler\\rustc_span\\src\\symbol.rs","byte_start":756,"byte_end":33829,"line_start":23,"line_end":1448,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"symbols! {","highlight_start":1,"highlight_end":11},{"text":"    // After modifying this list adjust `is_special`, `is_used_keyword`/`is_unused_keyword`,","highlight_start":1,"highlight_end":93},{"text":"    // this should be rarely necessary though if the keywords are kept in alphabetic order.","highlight_start":1,"highlight_end":92},{"text":"    Keywords {","highlight_start":1,"highlight_end":15},{"text":"        // Special reserved identifiers used internally for elided lifetimes,","highlight_start":1,"highlight_end":78},{"text":"        // unnamed method parameters, crate root module, error recovery etc.","highlight_start":1,"highlight_end":77},{"text":"        Empty:              \"\",","highlight_start":1,"highlight_end":32},{"text":"        PathRoot:           \"{{root}}\",","highlight_start":1,"highlight_end":40},{"text":"        DollarCrate:        \"$crate\",","highlight_start":1,"highlight_end":38},{"text":"        Underscore:         \"_\",","highlight_start":1,"highlight_end":33},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Keywords that are used in stable Rust.","highlight_start":1,"highlight_end":50},{"text":"        As:                 \"como\",","highlight_start":1,"highlight_end":36},{"text":"        Break:              \"romper\",","highlight_start":1,"highlight_end":38},{"text":"        Const:              \"const\",","highlight_start":1,"highlight_end":37},{"text":"        Continue:           \"continuar\",","highlight_start":1,"highlight_end":41},{"text":"        Crate:              \"crate\",","highlight_start":1,"highlight_end":37},{"text":"        Else:               \"sino\",","highlight_start":1,"highlight_end":36},{"text":"        Enum:               \"enum\",","highlight_start":1,"highlight_end":36},{"text":"        Extern:             \"externo\",","highlight_start":1,"highlight_end":39},{"text":"        False:              \"falso\",","highlight_start":1,"highlight_end":37},{"text":"        Fn:                 \"fun\",","highlight_start":1,"highlight_end":35},{"text":"        For:                \"desde\",","highlight_start":1,"highlight_end":37},{"text":"        If:                 \"si\",","highlight_start":1,"highlight_end":34},{"text":"        Impl:               \"impl\",","highlight_start":1,"highlight_end":36},{"text":"        In:                 \"en\",","highlight_start":1,"highlight_end":34},{"text":"        Let:                \"var\",","highlight_start":1,"highlight_end":35},{"text":"        Loop:               \"ciclo\",","highlight_start":1,"highlight_end":37},{"text":"        //Match:              \"match\",","highlight_start":1,"highlight_end":39},{"text":"        Mod:                \"mod\",","highlight_start":1,"highlight_end":35},{"text":"        //Move:               \"move\",","highlight_start":1,"highlight_end":38},{"text":"        //Mut:                \"mut\",","highlight_start":1,"highlight_end":37},{"text":"        Pub:                \"pub\",","highlight_start":1,"highlight_end":35},{"text":"        Ref:                \"ref\",","highlight_start":1,"highlight_end":35},{"text":"        Return:             \"ret\",","highlight_start":1,"highlight_end":35},{"text":"        SelfLower:          \"esto\",","highlight_start":1,"highlight_end":36},{"text":"        SelfUpper:          \"Esto\",","highlight_start":1,"highlight_end":36},{"text":"        Static:             \"estatico\",","highlight_start":1,"highlight_end":40},{"text":"        Struct:             \"estructura\",","highlight_start":1,"highlight_end":42},{"text":"        Super:              \"super\",","highlight_start":1,"highlight_end":37},{"text":"        //Trait:              \"trait\",","highlight_start":1,"highlight_end":39},{"text":"        True:               \"verdadero\",","highlight_start":1,"highlight_end":41},{"text":"        //Type:               \"type\",","highlight_start":1,"highlight_end":38},{"text":"        //Unsafe:             \"unsafe\",","highlight_start":1,"highlight_end":40},{"text":"        Use:                \"incluir\",","highlight_start":1,"highlight_end":39},{"text":"        //Where:              \"where\",","highlight_start":1,"highlight_end":39},{"text":"        While:              \"mientras\",","highlight_start":1,"highlight_end":40},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Keywords that are used in unstable Rust or reserved for future use.","highlight_start":1,"highlight_end":79},{"text":"        /*","highlight_start":1,"highlight_end":11},{"text":"        Abstract:           \"abstract\",","highlight_start":1,"highlight_end":40},{"text":"        Become:             \"become\",","highlight_start":1,"highlight_end":38},{"text":"        Box:                \"box\",","highlight_start":1,"highlight_end":35},{"text":"        Do:                 \"do\",","highlight_start":1,"highlight_end":34},{"text":"        Final:              \"final\",","highlight_start":1,"highlight_end":37},{"text":"        Macro:              \"macro\",","highlight_start":1,"highlight_end":37},{"text":"        Override:           \"override\",","highlight_start":1,"highlight_end":40},{"text":"        Priv:               \"priv\",","highlight_start":1,"highlight_end":36},{"text":"        Typeof:             \"typeof\",","highlight_start":1,"highlight_end":38},{"text":"        Unsized:            \"unsized\",","highlight_start":1,"highlight_end":39},{"text":"        Virtual:            \"virtual\",","highlight_start":1,"highlight_end":39},{"text":"        Yield:              \"yield\",","highlight_start":1,"highlight_end":37},{"text":"        */","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Edition-specific keywords that are used in stable Rust.","highlight_start":1,"highlight_end":67},{"text":"        /*","highlight_start":1,"highlight_end":11},{"text":"        Async:              \"async\", // >= 2018 Edition only","highlight_start":1,"highlight_end":61},{"text":"        Await:              \"await\", // >= 2018 Edition only","highlight_start":1,"highlight_end":61},{"text":"        Dyn:                \"dyn\", // >= 2018 Edition only","highlight_start":1,"highlight_end":59},{"text":"        */","highlight_start":1,"highlight_end":11},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Edition-specific keywords that are used in unstable Rust or reserved for future use.","highlight_start":1,"highlight_end":96},{"text":"        // Try:                \"try\", // >= 2018 Edition only","highlight_start":1,"highlight_end":62},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Special lifetime names","highlight_start":1,"highlight_end":34},{"text":"        UnderscoreLifetime: \"'_\",","highlight_start":1,"highlight_end":34},{"text":"        StaticLifetime:     \"'static\",","highlight_start":1,"highlight_end":39},{"text":"","highlight_start":1,"highlight_end":1},{"text":"        // Weak keywords, have special meaning only in specific contexts.","highlight_start":1,"highlight_end":74},{"text":"        /*","highlight_start":1,"highlight_end":11},{"text":"        Auto:               \"auto\",","highlight_start":1,"highlight_end":36},{"text":"        Catch:              \"catch\",","highlight_start":1,"highlight_end":37},{"text":"        Default:            \"default\",","highlight_start":1,"highlight_end":39},{"text":"        MacroRules:         \"macro_rules\",","highlight_start":1,"highlight_end":43},{"text":"        Raw:                \"raw\",","highlight_start":1,"highlight_end":35},{"text":"        */","highlight_start":1,"highlight_end":11},{"text":"        Union:              \"union\",","highlight_start":1,"highlight_end":37},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"","highlight_start":1,"highlight_end":1},{"text":"    // Pre-interned symbols that can be referred to with `rustc_span::sym::*`.","highlight_start":1,"highlight_end":79},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // The symbol is the stringified identifier unless otherwise specified, in","highlight_start":1,"highlight_end":79},{"text":"    // which case the name should mention the non-identifier punctuation.","highlight_start":1,"highlight_end":74},{"text":"    // E.g. `sym::proc_dash_macro` represents \"proc-macro\", and it shouldn't be","highlight_start":1,"highlight_end":80},{"text":"    // called `sym::proc_macro` because then it's easy to mistakenly think it","highlight_start":1,"highlight_end":78},{"text":"    // represents \"proc_macro\".","highlight_start":1,"highlight_end":32},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // As well as the symbols listed, there are symbols for the strings","highlight_start":1,"highlight_end":72},{"text":"    // \"0\", \"1\", ..., \"9\", which are accessible via `sym::integer`.","highlight_start":1,"highlight_end":68},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // The proc macro will abort if symbols are not in alphabetical order (as","highlight_start":1,"highlight_end":78},{"text":"    // defined by `impl Ord for str`) or if any symbols are duplicated. Vim","highlight_start":1,"highlight_end":76},{"text":"    // users can sort the list by selecting it and executing the command","highlight_start":1,"highlight_end":73},{"text":"    // `:'<,'>!LC_ALL=C sort`.","highlight_start":1,"highlight_end":31},{"text":"    //","highlight_start":1,"highlight_end":7},{"text":"    // There is currently no checking that all symbols are used; that would be","highlight_start":1,"highlight_end":79},{"text":"    // nice to have.","highlight_start":1,"highlight_end":21},{"text":"    Symbols {","highlight_start":1,"highlight_end":14},{"text":"        AcqRel,","highlight_start":1,"highlight_end":16},{"text":"        Acquire,","highlight_start":1,"highlight_end":17},{"text":"        Alignment,","highlight_start":1,"highlight_end":19},{"text":"        Any,","highlight_start":1,"highlight_end":13},{"text":"        Arc,","highlight_start":1,"highlight_end":13},{"text":"        Argument,","highlight_start":1,"highlight_end":18},{"text":"        ArgumentV1,","highlight_start":1,"highlight_end":20},{"text":"        Arguments,","highlight_start":1,"highlight_end":19},{"text":"        AsMut,","highlight_start":1,"highlight_end":15},{"text":"        AsRef,","highlight_start":1,"highlight_end":15},{"text":"        AtomicBool,","highlight_start":1,"highlight_end":20},{"text":"        AtomicI128,","highlight_start":1,"highlight_end":20},{"text":"        AtomicI16,","highlight_start":1,"highlight_end":19},{"text":"        AtomicI32,","highlight_start":1,"highlight_end":19},{"text":"        AtomicI64,","highlight_start":1,"highlight_end":19},{"text":"        AtomicI8,","highlight_start":1,"highlight_end":18},{"text":"        AtomicIsize,","highlight_start":1,"highlight_end":21},{"text":"        AtomicPtr,","highlight_start":1,"highlight_end":19},{"text":"        AtomicU128,","highlight_start":1,"highlight_end":20},{"text":"        AtomicU16,","highlight_start":1,"highlight_end":19},{"text":"        AtomicU32,","highlight_start":1,"highlight_end":19},{"text":"        AtomicU64,","highlight_start":1,"highlight_end":19},{"text":"        AtomicU8,","highlight_start":1,"highlight_end":18},{"text":"        AtomicUsize,","highlight_start":1,"highlight_end":21},{"text":"        BTreeEntry,","highlight_start":1,"highlight_end":20},{"text":"        BTreeMap,","highlight_start":1,"highlight_end":18},{"text":"        BTreeSet,","highlight_start":1,"highlight_end":18},{"text":"        BinaryHeap,","highlight_start":1,"highlight_end":20},{"text":"        Borrow,","highlight_start":1,"highlight_end":16},{"text":"        Break,","highlight_start":1,"highlight_end":15},{"text":"        C,","highlight_start":1,"highlight_end":11},{"text":"        CStr,","highlight_start":1,"highlight_end":14},{"text":"        CString,","highlight_start":1,"highlight_end":17},{"text":"        Center,","highlight_start":1,"highlight_end":16},{"text":"        Clone,","highlight_start":1,"highlight_end":15},{"text":"        Continue,","highlight_start":1,"highlight_end":18},{"text":"        Copy,","highlight_start":1,"highlight_end":14},{"text":"        Count,","highlight_start":1,"highlight_end":15},{"text":"        Cow,","highlight_start":1,"highlight_end":13},{"text":"        Debug,","highlight_start":1,"highlight_end":15},{"text":"        DebugStruct,","highlight_start":1,"highlight_end":21},{"text":"        DebugTuple,","highlight_start":1,"highlight_end":20},{"text":"        Decodable,","highlight_start":1,"highlight_end":19},{"text":"        Decoder,","highlight_start":1,"highlight_end":17},{"text":"        Default,","highlight_start":1,"highlight_end":17},{"text":"        Deref,","highlight_start":1,"highlight_end":15},{"text":"        DirBuilder,","highlight_start":1,"highlight_end":20},{"text":"        Display,","highlight_start":1,"highlight_end":17},{"text":"        DoubleEndedIterator,","highlight_start":1,"highlight_end":29},{"text":"        Duration,","highlight_start":1,"highlight_end":18},{"text":"        Encodable,","highlight_start":1,"highlight_end":19},{"text":"        Encoder,","highlight_start":1,"highlight_end":17},{"text":"        Eq,","highlight_start":1,"highlight_end":12},{"text":"        Equal,","highlight_start":1,"highlight_end":15},{"text":"        Err,","highlight_start":1,"highlight_end":13},{"text":"        Error,","highlight_start":1,"highlight_end":15},{"text":"        File,","highlight_start":1,"highlight_end":14},{"text":"        FileType,","highlight_start":1,"highlight_end":18},{"text":"        FormatSpec,","highlight_start":1,"highlight_end":20},{"text":"        Formatter,","highlight_start":1,"highlight_end":19},{"text":"        From,","highlight_start":1,"highlight_end":14},{"text":"        FromIterator,","highlight_start":1,"highlight_end":22},{"text":"        Future,","highlight_start":1,"highlight_end":16},{"text":"        FxHashMap,","highlight_start":1,"highlight_end":19},{"text":"        FxHashSet,","highlight_start":1,"highlight_end":19},{"text":"        GlobalAlloc,","highlight_start":1,"highlight_end":21},{"text":"        Hash,","highlight_start":1,"highlight_end":14},{"text":"        HashMap,","highlight_start":1,"highlight_end":17},{"text":"        HashMapEntry,","highlight_start":1,"highlight_end":22},{"text":"        HashSet,","highlight_start":1,"highlight_end":17},{"text":"        Hasher,","highlight_start":1,"highlight_end":16},{"text":"        Implied,","highlight_start":1,"highlight_end":17},{"text":"        Input,","highlight_start":1,"highlight_end":15},{"text":"        Into,","highlight_start":1,"highlight_end":14},{"text":"        IntoIterator,","highlight_start":1,"highlight_end":22},{"text":"        IoRead,","highlight_start":1,"highlight_end":16},{"text":"        IoWrite,","highlight_start":1,"highlight_end":17},{"text":"        Is,","highlight_start":1,"highlight_end":12},{"text":"        ItemContext,","highlight_start":1,"highlight_end":21},{"text":"        Iterator,","highlight_start":1,"highlight_end":18},{"text":"        Layout,","highlight_start":1,"highlight_end":16},{"text":"        Left,","highlight_start":1,"highlight_end":14},{"text":"        LinkedList,","highlight_start":1,"highlight_end":20},{"text":"        LintPass,","highlight_start":1,"highlight_end":18},{"text":"        Mutex,","highlight_start":1,"highlight_end":15},{"text":"        None,","highlight_start":1,"highlight_end":14},{"text":"        Ok,","highlight_start":1,"highlight_end":12},{"text":"        Option,","highlight_start":1,"highlight_end":16},{"text":"        Ord,","highlight_start":1,"highlight_end":13},{"text":"        Ordering,","highlight_start":1,"highlight_end":18},{"text":"        OsStr,","highlight_start":1,"highlight_end":15},{"text":"        OsString,","highlight_start":1,"highlight_end":18},{"text":"        Output,","highlight_start":1,"highlight_end":16},{"text":"        Param,","highlight_start":1,"highlight_end":15},{"text":"        PartialEq,","highlight_start":1,"highlight_end":19},{"text":"        PartialOrd,","highlight_start":1,"highlight_end":20},{"text":"        Path,","highlight_start":1,"highlight_end":14},{"text":"        PathBuf,","highlight_start":1,"highlight_end":17},{"text":"        Pending,","highlight_start":1,"highlight_end":17},{"text":"        Pin,","highlight_start":1,"highlight_end":13},{"text":"        Pointer,","highlight_start":1,"highlight_end":17},{"text":"        Poll,","highlight_start":1,"highlight_end":14},{"text":"        ProcMacro,","highlight_start":1,"highlight_end":19},{"text":"        ProcMacroHack,","highlight_start":1,"highlight_end":23},{"text":"        ProceduralMasqueradeDummyType,","highlight_start":1,"highlight_end":39},{"text":"        Range,","highlight_start":1,"highlight_end":15},{"text":"        RangeFrom,","highlight_start":1,"highlight_end":19},{"text":"        RangeFull,","highlight_start":1,"highlight_end":19},{"text":"        RangeInclusive,","highlight_start":1,"highlight_end":24},{"text":"        RangeTo,","highlight_start":1,"highlight_end":17},{"text":"        RangeToInclusive,","highlight_start":1,"highlight_end":26},{"text":"        Rc,","highlight_start":1,"highlight_end":12},{"text":"        Ready,","highlight_start":1,"highlight_end":15},{"text":"        Receiver,","highlight_start":1,"highlight_end":18},{"text":"        Relaxed,","highlight_start":1,"highlight_end":17},{"text":"        Release,","highlight_start":1,"highlight_end":17},{"text":"        Result,","highlight_start":1,"highlight_end":16},{"text":"        Return,","highlight_start":1,"highlight_end":16},{"text":"        Right,","highlight_start":1,"highlight_end":15},{"text":"        RustcDecodable,","highlight_start":1,"highlight_end":24},{"text":"        RustcEncodable,","highlight_start":1,"highlight_end":24},{"text":"        Send,","highlight_start":1,"highlight_end":14},{"text":"        SeqCst,","highlight_start":1,"highlight_end":16},{"text":"        Some,","highlight_start":1,"highlight_end":14},{"text":"        String,","highlight_start":1,"highlight_end":16},{"text":"        StructuralEq,","highlight_start":1,"highlight_end":22},{"text":"        StructuralPartialEq,","highlight_start":1,"highlight_end":29},{"text":"        Sync,","highlight_start":1,"highlight_end":14},{"text":"        Target,","highlight_start":1,"highlight_end":16},{"text":"        ToOwned,","highlight_start":1,"highlight_end":17},{"text":"        ToString,","highlight_start":1,"highlight_end":18},{"text":"        Try,","highlight_start":1,"highlight_end":13},{"text":"        TryFrom,","highlight_start":1,"highlight_end":17},{"text":"        TryInto,","highlight_start":1,"highlight_end":17},{"text":"        Ty,","highlight_start":1,"highlight_end":12},{"text":"        TyCtxt,","highlight_start":1,"highlight_end":16},{"text":"        TyKind,","highlight_start":1,"highlight_end":16},{"text":"        Unknown,","highlight_start":1,"highlight_end":17},{"text":"        UnsafeArg,","highlight_start":1,"highlight_end":19},{"text":"        Vec,","highlight_start":1,"highlight_end":13},{"text":"        VecDeque,","highlight_start":1,"highlight_end":18},{"text":"        Yield,","highlight_start":1,"highlight_end":15},{"text":"        _DECLS,","highlight_start":1,"highlight_end":16},{"text":"        _Self,","highlight_start":1,"highlight_end":15},{"text":"        __D,","highlight_start":1,"highlight_end":13},{"text":"        __H,","highlight_start":1,"highlight_end":13},{"text":"        __S,","highlight_start":1,"highlight_end":13},{"text":"        __try_var,","highlight_start":1,"highlight_end":19},{"text":"        _args,","highlight_start":1,"highlight_end":15},{"text":"        _d,","highlight_start":1,"highlight_end":12},{"text":"        _e,","highlight_start":1,"highlight_end":12},{"text":"        _task_context,","highlight_start":1,"highlight_end":23},{"text":"        a32,","highlight_start":1,"highlight_end":13},{"text":"        aarch64_target_feature,","highlight_start":1,"highlight_end":32},{"text":"        abi,","highlight_start":1,"highlight_end":13},{"text":"        abi_amdgpu_kernel,","highlight_start":1,"highlight_end":27},{"text":"        abi_avr_interrupt,","highlight_start":1,"highlight_end":27},{"text":"        abi_c_cmse_nonsecure_call,","highlight_start":1,"highlight_end":35},{"text":"        abi_efiapi,","highlight_start":1,"highlight_end":20},{"text":"        abi_msp430_interrupt,","highlight_start":1,"highlight_end":30},{"text":"        abi_ptx,","highlight_start":1,"highlight_end":17},{"text":"        abi_sysv64,","highlight_start":1,"highlight_end":20},{"text":"        abi_thiscall,","highlight_start":1,"highlight_end":22},{"text":"        abi_unadjusted,","highlight_start":1,"highlight_end":24},{"text":"        abi_vectorcall,","highlight_start":1,"highlight_end":24},{"text":"        abi_x86_interrupt,","highlight_start":1,"highlight_end":27},{"text":"        abort,","highlight_start":1,"highlight_end":15},{"text":"        aborts,","highlight_start":1,"highlight_end":16},{"text":"        add,","highlight_start":1,"highlight_end":13},{"text":"        add_assign,","highlight_start":1,"highlight_end":20},{"text":"        add_with_overflow,","highlight_start":1,"highlight_end":27},{"text":"        address,","highlight_start":1,"highlight_end":17},{"text":"        adt_const_params,","highlight_start":1,"highlight_end":26},{"text":"        advanced_slice_patterns,","highlight_start":1,"highlight_end":33},{"text":"        adx_target_feature,","highlight_start":1,"highlight_end":28},{"text":"        alias,","highlight_start":1,"highlight_end":15},{"text":"        align,","highlight_start":1,"highlight_end":15},{"text":"        align_offset,","highlight_start":1,"highlight_end":22},{"text":"        alignstack,","highlight_start":1,"highlight_end":20},{"text":"        all,","highlight_start":1,"highlight_end":13},{"text":"        alloc,","highlight_start":1,"highlight_end":15},{"text":"        alloc_error_handler,","highlight_start":1,"highlight_end":29},{"text":"        alloc_layout,","highlight_start":1,"highlight_end":22},{"text":"        alloc_zeroed,","highlight_start":1,"highlight_end":22},{"text":"        allocator,","highlight_start":1,"highlight_end":19},{"text":"        allocator_api,","highlight_start":1,"highlight_end":23},{"text":"        allocator_internals,","highlight_start":1,"highlight_end":29},{"text":"        allow,","highlight_start":1,"highlight_end":15},{"text":"        allow_fail,","highlight_start":1,"highlight_end":20},{"text":"        allow_internal_unsafe,","highlight_start":1,"highlight_end":31},{"text":"        allow_internal_unstable,","highlight_start":1,"highlight_end":33},{"text":"        allowed,","highlight_start":1,"highlight_end":17},{"text":"        always,","highlight_start":1,"highlight_end":16},{"text":"        and,","highlight_start":1,"highlight_end":13},{"text":"        and_then,","highlight_start":1,"highlight_end":18},{"text":"        any,","highlight_start":1,"highlight_end":13},{"text":"        arbitrary_enum_discriminant,","highlight_start":1,"highlight_end":37},{"text":"        arbitrary_self_types,","highlight_start":1,"highlight_end":30},{"text":"        arith_offset,","highlight_start":1,"highlight_end":22},{"text":"        arm,","highlight_start":1,"highlight_end":13},{"text":"        arm_target_feature,","highlight_start":1,"highlight_end":28},{"text":"        array,","highlight_start":1,"highlight_end":15},{"text":"        arrays,","highlight_start":1,"highlight_end":16},{"text":"        as_ptr,","highlight_start":1,"highlight_end":16},{"text":"        as_str,","highlight_start":1,"highlight_end":16},{"text":"        asm,","highlight_start":1,"highlight_end":13},{"text":"        asm_const,","highlight_start":1,"highlight_end":19},{"text":"        asm_experimental_arch,","highlight_start":1,"highlight_end":31},{"text":"        asm_sym,","highlight_start":1,"highlight_end":17},{"text":"        assert,","highlight_start":1,"highlight_end":16},{"text":"        assert_inhabited,","highlight_start":1,"highlight_end":26},{"text":"        assert_macro,","highlight_start":1,"highlight_end":22},{"text":"        assert_receiver_is_total_eq,","highlight_start":1,"highlight_end":37},{"text":"        assert_uninit_valid,","highlight_start":1,"highlight_end":29},{"text":"        assert_zero_valid,","highlight_start":1,"highlight_end":27},{"text":"        associated_consts,","highlight_start":1,"highlight_end":27},{"text":"        associated_type_bounds,","highlight_start":1,"highlight_end":32},{"text":"        associated_type_defaults,","highlight_start":1,"highlight_end":34},{"text":"        associated_types,","highlight_start":1,"highlight_end":26},{"text":"        assume,","highlight_start":1,"highlight_end":16},{"text":"        assume_init,","highlight_start":1,"highlight_end":21},{"text":"        async_await,","highlight_start":1,"highlight_end":21},{"text":"        async_closure,","highlight_start":1,"highlight_end":23},{"text":"        atomic,","highlight_start":1,"highlight_end":16},{"text":"        atomic_mod,","highlight_start":1,"highlight_end":20},{"text":"        atomics,","highlight_start":1,"highlight_end":17},{"text":"        att_syntax,","highlight_start":1,"highlight_end":20},{"text":"        attr,","highlight_start":1,"highlight_end":14},{"text":"        attr_literals,","highlight_start":1,"highlight_end":23},{"text":"        attributes,","highlight_start":1,"highlight_end":20},{"text":"        augmented_assignments,","highlight_start":1,"highlight_end":31},{"text":"        auto_traits,","highlight_start":1,"highlight_end":21},{"text":"        automatically_derived,","highlight_start":1,"highlight_end":31},{"text":"        avx512_target_feature,","highlight_start":1,"highlight_end":31},{"text":"        await_macro,","highlight_start":1,"highlight_end":21},{"text":"        bang,","highlight_start":1,"highlight_end":14},{"text":"        begin_panic,","highlight_start":1,"highlight_end":21},{"text":"        bench,","highlight_start":1,"highlight_end":15},{"text":"        bin,","highlight_start":1,"highlight_end":13},{"text":"        bind_by_move_pattern_guards,","highlight_start":1,"highlight_end":37},{"text":"        bindings_after_at,","highlight_start":1,"highlight_end":27},{"text":"        bitand,","highlight_start":1,"highlight_end":16},{"text":"        bitand_assign,","highlight_start":1,"highlight_end":23},{"text":"        bitor,","highlight_start":1,"highlight_end":15},{"text":"        bitor_assign,","highlight_start":1,"highlight_end":22},{"text":"        bitreverse,","highlight_start":1,"highlight_end":20},{"text":"        bitxor,","highlight_start":1,"highlight_end":16},{"text":"        bitxor_assign,","highlight_start":1,"highlight_end":23},{"text":"        black_box,","highlight_start":1,"highlight_end":19},{"text":"        block,","highlight_start":1,"highlight_end":15},{"text":"        bool,","highlight_start":1,"highlight_end":14},{"text":"        borrowck_graphviz_format,","highlight_start":1,"highlight_end":34},{"text":"        borrowck_graphviz_postflow,","highlight_start":1,"highlight_end":36},{"text":"        borrowck_graphviz_preflow,","highlight_start":1,"highlight_end":35},{"text":"        box_free,","highlight_start":1,"highlight_end":18},{"text":"        box_patterns,","highlight_start":1,"highlight_end":22},{"text":"        box_syntax,","highlight_start":1,"highlight_end":20},{"text":"        bpf_target_feature,","highlight_start":1,"highlight_end":28},{"text":"        braced_empty_structs,","highlight_start":1,"highlight_end":30},{"text":"        branch,","highlight_start":1,"highlight_end":16},{"text":"        breakpoint,","highlight_start":1,"highlight_end":20},{"text":"        bridge,","highlight_start":1,"highlight_end":16},{"text":"        bswap,","highlight_start":1,"highlight_end":15},{"text":"        c_str,","highlight_start":1,"highlight_end":15},{"text":"        c_unwind,","highlight_start":1,"highlight_end":18},{"text":"        c_variadic,","highlight_start":1,"highlight_end":20},{"text":"        call,","highlight_start":1,"highlight_end":14},{"text":"        call_mut,","highlight_start":1,"highlight_end":18},{"text":"        call_once,","highlight_start":1,"highlight_end":19},{"text":"        caller_location,","highlight_start":1,"highlight_end":25},{"text":"        capture_disjoint_fields,","highlight_start":1,"highlight_end":33},{"text":"        cdylib,","highlight_start":1,"highlight_end":16},{"text":"        ceilf32,","highlight_start":1,"highlight_end":17},{"text":"        ceilf64,","highlight_start":1,"highlight_end":17},{"text":"        cfg,","highlight_start":1,"highlight_end":13},{"text":"        cfg_accessible,","highlight_start":1,"highlight_end":24},{"text":"        cfg_attr,","highlight_start":1,"highlight_end":18},{"text":"        cfg_attr_multi,","highlight_start":1,"highlight_end":24},{"text":"        cfg_doctest,","highlight_start":1,"highlight_end":21},{"text":"        cfg_eval,","highlight_start":1,"highlight_end":18},{"text":"        cfg_hide,","highlight_start":1,"highlight_end":18},{"text":"        cfg_panic,","highlight_start":1,"highlight_end":19},{"text":"        cfg_sanitize,","highlight_start":1,"highlight_end":22},{"text":"        cfg_target_abi,","highlight_start":1,"highlight_end":24},{"text":"        cfg_target_feature,","highlight_start":1,"highlight_end":28},{"text":"        cfg_target_has_atomic,","highlight_start":1,"highlight_end":31},{"text":"        cfg_target_thread_local,","highlight_start":1,"highlight_end":33},{"text":"        cfg_target_vendor,","highlight_start":1,"highlight_end":27},{"text":"        cfg_version,","highlight_start":1,"highlight_end":21},{"text":"        cfi,","highlight_start":1,"highlight_end":13},{"text":"        char,","highlight_start":1,"highlight_end":14},{"text":"        client,","highlight_start":1,"highlight_end":16},{"text":"        clippy,","highlight_start":1,"highlight_end":16},{"text":"        clobber_abi,","highlight_start":1,"highlight_end":21},{"text":"        clone,","highlight_start":1,"highlight_end":15},{"text":"        clone_closures,","highlight_start":1,"highlight_end":24},{"text":"        clone_from,","highlight_start":1,"highlight_end":20},{"text":"        closure,","highlight_start":1,"highlight_end":17},{"text":"        closure_to_fn_coercion,","highlight_start":1,"highlight_end":32},{"text":"        closure_track_caller,","highlight_start":1,"highlight_end":30},{"text":"        cmp,","highlight_start":1,"highlight_end":13},{"text":"        cmp_max,","highlight_start":1,"highlight_end":17},{"text":"        cmp_min,","highlight_start":1,"highlight_end":17},{"text":"        cmpxchg16b_target_feature,","highlight_start":1,"highlight_end":35},{"text":"        cmse_nonsecure_entry,","highlight_start":1,"highlight_end":30},{"text":"        coerce_unsized,","highlight_start":1,"highlight_end":24},{"text":"        cold,","highlight_start":1,"highlight_end":14},{"text":"        column,","highlight_start":1,"highlight_end":16},{"text":"        compare_and_swap,","highlight_start":1,"highlight_end":26},{"text":"        compare_exchange,","highlight_start":1,"highlight_end":26},{"text":"        compare_exchange_weak,","highlight_start":1,"highlight_end":31},{"text":"        compile_error,","highlight_start":1,"highlight_end":23},{"text":"        compiler_builtins,","highlight_start":1,"highlight_end":27},{"text":"        compiler_fence,","highlight_start":1,"highlight_end":24},{"text":"        concat,","highlight_start":1,"highlight_end":16},{"text":"        concat_idents,","highlight_start":1,"highlight_end":23},{"text":"        conservative_impl_trait,","highlight_start":1,"highlight_end":33},{"text":"        console,","highlight_start":1,"highlight_end":17},{"text":"        const_allocate,","highlight_start":1,"highlight_end":24},{"text":"        const_async_blocks,","highlight_start":1,"highlight_end":28},{"text":"        const_compare_raw_pointers,","highlight_start":1,"highlight_end":36},{"text":"        const_constructor,","highlight_start":1,"highlight_end":27},{"text":"        const_eval_limit,","highlight_start":1,"highlight_end":26},{"text":"        const_eval_select,","highlight_start":1,"highlight_end":27},{"text":"        const_eval_select_ct,","highlight_start":1,"highlight_end":30},{"text":"        const_evaluatable_checked,","highlight_start":1,"highlight_end":35},{"text":"        const_extern_fn,","highlight_start":1,"highlight_end":25},{"text":"        const_fn,","highlight_start":1,"highlight_end":18},{"text":"        const_fn_floating_point_arithmetic,","highlight_start":1,"highlight_end":44},{"text":"        const_fn_fn_ptr_basics,","highlight_start":1,"highlight_end":32},{"text":"        const_fn_trait_bound,","highlight_start":1,"highlight_end":30},{"text":"        const_fn_transmute,","highlight_start":1,"highlight_end":28},{"text":"        const_fn_union,","highlight_start":1,"highlight_end":24},{"text":"        const_fn_unsize,","highlight_start":1,"highlight_end":25},{"text":"        const_for,","highlight_start":1,"highlight_end":19},{"text":"        const_format_args,","highlight_start":1,"highlight_end":27},{"text":"        const_generic_defaults,","highlight_start":1,"highlight_end":32},{"text":"        const_generics,","highlight_start":1,"highlight_end":24},{"text":"        const_generics_defaults,","highlight_start":1,"highlight_end":33},{"text":"        const_if_match,","highlight_start":1,"highlight_end":24},{"text":"        const_impl_trait,","highlight_start":1,"highlight_end":26},{"text":"        const_in_array_repeat_expressions,","highlight_start":1,"highlight_end":43},{"text":"        const_indexing,","highlight_start":1,"highlight_end":24},{"text":"        const_let,","highlight_start":1,"highlight_end":19},{"text":"        const_loop,","highlight_start":1,"highlight_end":20},{"text":"        const_mut_refs,","highlight_start":1,"highlight_end":24},{"text":"        const_panic,","highlight_start":1,"highlight_end":21},{"text":"        const_panic_fmt,","highlight_start":1,"highlight_end":25},{"text":"        const_precise_live_drops,","highlight_start":1,"highlight_end":34},{"text":"        const_ptr,","highlight_start":1,"highlight_end":19},{"text":"        const_raw_ptr_deref,","highlight_start":1,"highlight_end":29},{"text":"        const_raw_ptr_to_usize_cast,","highlight_start":1,"highlight_end":37},{"text":"        const_refs_to_cell,","highlight_start":1,"highlight_end":28},{"text":"        const_slice_ptr,","highlight_start":1,"highlight_end":25},{"text":"        const_trait_bound_opt_out,","highlight_start":1,"highlight_end":35},{"text":"        const_trait_impl,","highlight_start":1,"highlight_end":26},{"text":"        const_transmute,","highlight_start":1,"highlight_end":25},{"text":"        const_try,","highlight_start":1,"highlight_end":19},{"text":"        constant,","highlight_start":1,"highlight_end":18},{"text":"        constructor,","highlight_start":1,"highlight_end":21},{"text":"        contents,","highlight_start":1,"highlight_end":18},{"text":"        context,","highlight_start":1,"highlight_end":17},{"text":"        convert,","highlight_start":1,"highlight_end":17},{"text":"        copy,","highlight_start":1,"highlight_end":14},{"text":"        copy_closures,","highlight_start":1,"highlight_end":23},{"text":"        copy_nonoverlapping,","highlight_start":1,"highlight_end":29},{"text":"        copysignf32,","highlight_start":1,"highlight_end":21},{"text":"        copysignf64,","highlight_start":1,"highlight_end":21},{"text":"        core,","highlight_start":1,"highlight_end":14},{"text":"        core_intrinsics,","highlight_start":1,"highlight_end":25},{"text":"        core_panic,","highlight_start":1,"highlight_end":20},{"text":"        core_panic_2015_macro,","highlight_start":1,"highlight_end":31},{"text":"        core_panic_macro,","highlight_start":1,"highlight_end":26},{"text":"        cosf32,","highlight_start":1,"highlight_end":16},{"text":"        cosf64,","highlight_start":1,"highlight_end":16},{"text":"        cr,","highlight_start":1,"highlight_end":12},{"text":"        crate_id,","highlight_start":1,"highlight_end":18},{"text":"        crate_in_paths,","highlight_start":1,"highlight_end":24},{"text":"        crate_local,","highlight_start":1,"highlight_end":21},{"text":"        crate_name,","highlight_start":1,"highlight_end":20},{"text":"        crate_type,","highlight_start":1,"highlight_end":20},{"text":"        crate_visibility_modifier,","highlight_start":1,"highlight_end":35},{"text":"        crt_dash_static: \"crt-static\",","highlight_start":1,"highlight_end":39},{"text":"        cstring_type,","highlight_start":1,"highlight_end":22},{"text":"        ctlz,","highlight_start":1,"highlight_end":14},{"text":"        ctlz_nonzero,","highlight_start":1,"highlight_end":22},{"text":"        ctpop,","highlight_start":1,"highlight_end":15},{"text":"        cttz,","highlight_start":1,"highlight_end":14},{"text":"        cttz_nonzero,","highlight_start":1,"highlight_end":22},{"text":"        custom_attribute,","highlight_start":1,"highlight_end":26},{"text":"        custom_derive,","highlight_start":1,"highlight_end":23},{"text":"        custom_inner_attributes,","highlight_start":1,"highlight_end":33},{"text":"        custom_test_frameworks,","highlight_start":1,"highlight_end":32},{"text":"        d,","highlight_start":1,"highlight_end":11},{"text":"        dead_code,","highlight_start":1,"highlight_end":19},{"text":"        dealloc,","highlight_start":1,"highlight_end":17},{"text":"        debug,","highlight_start":1,"highlight_end":15},{"text":"        debug_assert_macro,","highlight_start":1,"highlight_end":28},{"text":"        debug_assertions,","highlight_start":1,"highlight_end":26},{"text":"        debug_struct,","highlight_start":1,"highlight_end":22},{"text":"        debug_trait_builder,","highlight_start":1,"highlight_end":29},{"text":"        debug_tuple,","highlight_start":1,"highlight_end":21},{"text":"        decl_macro,","highlight_start":1,"highlight_end":20},{"text":"        declare_lint_pass,","highlight_start":1,"highlight_end":27},{"text":"        decode,","highlight_start":1,"highlight_end":16},{"text":"        default_alloc_error_handler,","highlight_start":1,"highlight_end":37},{"text":"        default_lib_allocator,","highlight_start":1,"highlight_end":31},{"text":"        default_method_body_is_const,","highlight_start":1,"highlight_end":38},{"text":"        default_type_parameter_fallback,","highlight_start":1,"highlight_end":41},{"text":"        default_type_params,","highlight_start":1,"highlight_end":29},{"text":"        delay_span_bug_from_inside_query,","highlight_start":1,"highlight_end":42},{"text":"        deny,","highlight_start":1,"highlight_end":14},{"text":"        deprecated,","highlight_start":1,"highlight_end":20},{"text":"        deref,","highlight_start":1,"highlight_end":15},{"text":"        deref_method,","highlight_start":1,"highlight_end":22},{"text":"        deref_mut,","highlight_start":1,"highlight_end":19},{"text":"        deref_target,","highlight_start":1,"highlight_end":22},{"text":"        derive,","highlight_start":1,"highlight_end":16},{"text":"        derive_default_enum,","highlight_start":1,"highlight_end":29},{"text":"        destructuring_assignment,","highlight_start":1,"highlight_end":34},{"text":"        diagnostic,","highlight_start":1,"highlight_end":20},{"text":"        direct,","highlight_start":1,"highlight_end":16},{"text":"        discriminant_kind,","highlight_start":1,"highlight_end":27},{"text":"        discriminant_type,","highlight_start":1,"highlight_end":27},{"text":"        discriminant_value,","highlight_start":1,"highlight_end":28},{"text":"        dispatch_from_dyn,","highlight_start":1,"highlight_end":27},{"text":"        display_trait,","highlight_start":1,"highlight_end":23},{"text":"        div,","highlight_start":1,"highlight_end":13},{"text":"        div_assign,","highlight_start":1,"highlight_end":20},{"text":"        doc,","highlight_start":1,"highlight_end":13},{"text":"        doc_alias,","highlight_start":1,"highlight_end":19},{"text":"        doc_auto_cfg,","highlight_start":1,"highlight_end":22},{"text":"        doc_cfg,","highlight_start":1,"highlight_end":17},{"text":"        doc_cfg_hide,","highlight_start":1,"highlight_end":22},{"text":"        doc_keyword,","highlight_start":1,"highlight_end":21},{"text":"        doc_masked,","highlight_start":1,"highlight_end":20},{"text":"        doc_notable_trait,","highlight_start":1,"highlight_end":27},{"text":"        doc_primitive,","highlight_start":1,"highlight_end":23},{"text":"        doc_spotlight,","highlight_start":1,"highlight_end":23},{"text":"        doctest,","highlight_start":1,"highlight_end":17},{"text":"        document_private_items,","highlight_start":1,"highlight_end":32},{"text":"        dotdot_in_tuple_patterns,","highlight_start":1,"highlight_end":34},{"text":"        dotdoteq_in_patterns,","highlight_start":1,"highlight_end":30},{"text":"        dreg,","highlight_start":1,"highlight_end":14},{"text":"        dreg_low16,","highlight_start":1,"highlight_end":20},{"text":"        dreg_low8,","highlight_start":1,"highlight_end":19},{"text":"        drop,","highlight_start":1,"highlight_end":14},{"text":"        drop_in_place,","highlight_start":1,"highlight_end":23},{"text":"        drop_types_in_const,","highlight_start":1,"highlight_end":29},{"text":"        dropck_eyepatch,","highlight_start":1,"highlight_end":25},{"text":"        dropck_parametricity,","highlight_start":1,"highlight_end":30},{"text":"        dylib,","highlight_start":1,"highlight_end":15},{"text":"        dyn_metadata,","highlight_start":1,"highlight_end":22},{"text":"        dyn_trait,","highlight_start":1,"highlight_end":19},{"text":"        edition_macro_pats,","highlight_start":1,"highlight_end":28},{"text":"        edition_panic,","highlight_start":1,"highlight_end":23},{"text":"        eh_catch_typeinfo,","highlight_start":1,"highlight_end":27},{"text":"        eh_personality,","highlight_start":1,"highlight_end":24},{"text":"        emit_enum,","highlight_start":1,"highlight_end":19},{"text":"        emit_enum_variant,","highlight_start":1,"highlight_end":27},{"text":"        emit_enum_variant_arg,","highlight_start":1,"highlight_end":31},{"text":"        emit_struct,","highlight_start":1,"highlight_end":21},{"text":"        emit_struct_field,","highlight_start":1,"highlight_end":27},{"text":"        enable,","highlight_start":1,"highlight_end":16},{"text":"        enclosing_scope,","highlight_start":1,"highlight_end":25},{"text":"        encode,","highlight_start":1,"highlight_end":16},{"text":"        env,","highlight_start":1,"highlight_end":13},{"text":"        eq,","highlight_start":1,"highlight_end":12},{"text":"        ermsb_target_feature,","highlight_start":1,"highlight_end":30},{"text":"        exact_div,","highlight_start":1,"highlight_end":19},{"text":"        except,","highlight_start":1,"highlight_end":16},{"text":"        exchange_malloc,","highlight_start":1,"highlight_end":25},{"text":"        exclusive_range_pattern,","highlight_start":1,"highlight_end":33},{"text":"        exhaustive_integer_patterns,","highlight_start":1,"highlight_end":37},{"text":"        exhaustive_patterns,","highlight_start":1,"highlight_end":29},{"text":"        existential_type,","highlight_start":1,"highlight_end":26},{"text":"        exp2f32,","highlight_start":1,"highlight_end":17},{"text":"        exp2f64,","highlight_start":1,"highlight_end":17},{"text":"        expect,","highlight_start":1,"highlight_end":16},{"text":"        expected,","highlight_start":1,"highlight_end":18},{"text":"        expf32,","highlight_start":1,"highlight_end":16},{"text":"        expf64,","highlight_start":1,"highlight_end":16},{"text":"        explicit_generic_args_with_impl_trait,","highlight_start":1,"highlight_end":47},{"text":"        export_name,","highlight_start":1,"highlight_end":21},{"text":"        expr,","highlight_start":1,"highlight_end":14},{"text":"        extended_key_value_attributes,","highlight_start":1,"highlight_end":39},{"text":"        extern_absolute_paths,","highlight_start":1,"highlight_end":31},{"text":"        extern_crate_item_prelude,","highlight_start":1,"highlight_end":35},{"text":"        extern_crate_self,","highlight_start":1,"highlight_end":27},{"text":"        extern_in_paths,","highlight_start":1,"highlight_end":25},{"text":"        extern_prelude,","highlight_start":1,"highlight_end":24},{"text":"        extern_types,","highlight_start":1,"highlight_end":22},{"text":"        external_doc,","highlight_start":1,"highlight_end":22},{"text":"        f,","highlight_start":1,"highlight_end":11},{"text":"        f16c_target_feature,","highlight_start":1,"highlight_end":29},{"text":"        f32,","highlight_start":1,"highlight_end":13},{"text":"        f32_runtime,","highlight_start":1,"highlight_end":21},{"text":"        f64,","highlight_start":1,"highlight_end":13},{"text":"        f64_runtime,","highlight_start":1,"highlight_end":21},{"text":"        fabsf32,","highlight_start":1,"highlight_end":17},{"text":"        fabsf64,","highlight_start":1,"highlight_end":17},{"text":"        fadd_fast,","highlight_start":1,"highlight_end":19},{"text":"        fdiv_fast,","highlight_start":1,"highlight_end":19},{"text":"        feature,","highlight_start":1,"highlight_end":17},{"text":"        fence,","highlight_start":1,"highlight_end":15},{"text":"        fetch_update,","highlight_start":1,"highlight_end":22},{"text":"        ffi,","highlight_start":1,"highlight_end":13},{"text":"        ffi_const,","highlight_start":1,"highlight_end":19},{"text":"        ffi_pure,","highlight_start":1,"highlight_end":18},{"text":"        ffi_returns_twice,","highlight_start":1,"highlight_end":27},{"text":"        field,","highlight_start":1,"highlight_end":15},{"text":"        field_init_shorthand,","highlight_start":1,"highlight_end":30},{"text":"        file,","highlight_start":1,"highlight_end":14},{"text":"        fill,","highlight_start":1,"highlight_end":14},{"text":"        finish,","highlight_start":1,"highlight_end":16},{"text":"        flags,","highlight_start":1,"highlight_end":15},{"text":"        float_to_int_unchecked,","highlight_start":1,"highlight_end":32},{"text":"        floorf32,","highlight_start":1,"highlight_end":18},{"text":"        floorf64,","highlight_start":1,"highlight_end":18},{"text":"        fmaf32,","highlight_start":1,"highlight_end":16},{"text":"        fmaf64,","highlight_start":1,"highlight_end":16},{"text":"        fmt,","highlight_start":1,"highlight_end":13},{"text":"        fmt_as_str,","highlight_start":1,"highlight_end":20},{"text":"        fmt_internals,","highlight_start":1,"highlight_end":23},{"text":"        fmul_fast,","highlight_start":1,"highlight_end":19},{"text":"        fn_align,","highlight_start":1,"highlight_end":18},{"text":"        fn_must_use,","highlight_start":1,"highlight_end":21},{"text":"        fn_mut,","highlight_start":1,"highlight_end":16},{"text":"        fn_once,","highlight_start":1,"highlight_end":17},{"text":"        fn_once_output,","highlight_start":1,"highlight_end":24},{"text":"        forbid,","highlight_start":1,"highlight_end":16},{"text":"        forget,","highlight_start":1,"highlight_end":16},{"text":"        format,","highlight_start":1,"highlight_end":16},{"text":"        format_args,","highlight_start":1,"highlight_end":21},{"text":"        format_args_capture,","highlight_start":1,"highlight_end":29},{"text":"        format_args_nl,","highlight_start":1,"highlight_end":24},{"text":"        format_macro,","highlight_start":1,"highlight_end":22},{"text":"        freeze,","highlight_start":1,"highlight_end":16},{"text":"        freg,","highlight_start":1,"highlight_end":14},{"text":"        frem_fast,","highlight_start":1,"highlight_end":19},{"text":"        from,","highlight_start":1,"highlight_end":14},{"text":"        from_desugaring,","highlight_start":1,"highlight_end":25},{"text":"        from_generator,","highlight_start":1,"highlight_end":24},{"text":"        from_iter,","highlight_start":1,"highlight_end":19},{"text":"        from_method,","highlight_start":1,"highlight_end":21},{"text":"        from_output,","highlight_start":1,"highlight_end":21},{"text":"        from_residual,","highlight_start":1,"highlight_end":23},{"text":"        from_size_align_unchecked,","highlight_start":1,"highlight_end":35},{"text":"        from_usize,","highlight_start":1,"highlight_end":20},{"text":"        fsub_fast,","highlight_start":1,"highlight_end":19},{"text":"        fundamental,","highlight_start":1,"highlight_end":21},{"text":"        future,","highlight_start":1,"highlight_end":16},{"text":"        future_trait,","highlight_start":1,"highlight_end":22},{"text":"        ge,","highlight_start":1,"highlight_end":12},{"text":"        gen_future,","highlight_start":1,"highlight_end":20},{"text":"        gen_kill,","highlight_start":1,"highlight_end":18},{"text":"        generator,","highlight_start":1,"highlight_end":19},{"text":"        generator_return,","highlight_start":1,"highlight_end":26},{"text":"        generator_state,","highlight_start":1,"highlight_end":25},{"text":"        generators,","highlight_start":1,"highlight_end":20},{"text":"        generic_arg_infer,","highlight_start":1,"highlight_end":27},{"text":"        generic_associated_types,","highlight_start":1,"highlight_end":34},{"text":"        generic_const_exprs,","highlight_start":1,"highlight_end":29},{"text":"        generic_param_attrs,","highlight_start":1,"highlight_end":29},{"text":"        get_context,","highlight_start":1,"highlight_end":21},{"text":"        global_allocator,","highlight_start":1,"highlight_end":26},{"text":"        global_asm,","highlight_start":1,"highlight_end":20},{"text":"        globs,","highlight_start":1,"highlight_end":15},{"text":"        gt,","highlight_start":1,"highlight_end":12},{"text":"        half_open_range_patterns,","highlight_start":1,"highlight_end":34},{"text":"        hash,","highlight_start":1,"highlight_end":14},{"text":"        hexagon_target_feature,","highlight_start":1,"highlight_end":32},{"text":"        hidden,","highlight_start":1,"highlight_end":16},{"text":"        homogeneous_aggregate,","highlight_start":1,"highlight_end":31},{"text":"        html_favicon_url,","highlight_start":1,"highlight_end":26},{"text":"        html_logo_url,","highlight_start":1,"highlight_end":23},{"text":"        html_no_source,","highlight_start":1,"highlight_end":24},{"text":"        html_playground_url,","highlight_start":1,"highlight_end":29},{"text":"        html_root_url,","highlight_start":1,"highlight_end":23},{"text":"        hwaddress,","highlight_start":1,"highlight_end":19},{"text":"        i,","highlight_start":1,"highlight_end":11},{"text":"        i128,","highlight_start":1,"highlight_end":14},{"text":"        i128_type,","highlight_start":1,"highlight_end":19},{"text":"        i16,","highlight_start":1,"highlight_end":13},{"text":"        i32,","highlight_start":1,"highlight_end":13},{"text":"        i64,","highlight_start":1,"highlight_end":13},{"text":"        i8,","highlight_start":1,"highlight_end":12},{"text":"        ident,","highlight_start":1,"highlight_end":15},{"text":"        if_let,","highlight_start":1,"highlight_end":16},{"text":"        if_let_guard,","highlight_start":1,"highlight_end":22},{"text":"        if_while_or_patterns,","highlight_start":1,"highlight_end":30},{"text":"        ignore,","highlight_start":1,"highlight_end":16},{"text":"        impl_header_lifetime_elision,","highlight_start":1,"highlight_end":38},{"text":"        impl_lint_pass,","highlight_start":1,"highlight_end":24},{"text":"        impl_macros,","highlight_start":1,"highlight_end":21},{"text":"        impl_trait_in_bindings,","highlight_start":1,"highlight_end":32},{"text":"        import_shadowing,","highlight_start":1,"highlight_end":26},{"text":"        imported_main,","highlight_start":1,"highlight_end":23},{"text":"        in_band_lifetimes,","highlight_start":1,"highlight_end":27},{"text":"        include,","highlight_start":1,"highlight_end":17},{"text":"        include_bytes,","highlight_start":1,"highlight_end":23},{"text":"        include_str,","highlight_start":1,"highlight_end":21},{"text":"        inclusive_range_syntax,","highlight_start":1,"highlight_end":32},{"text":"        index,","highlight_start":1,"highlight_end":15},{"text":"        index_mut,","highlight_start":1,"highlight_end":19},{"text":"        infer_outlives_requirements,","highlight_start":1,"highlight_end":37},{"text":"        infer_static_outlives_requirements,","highlight_start":1,"highlight_end":44},{"text":"        inherent_associated_types,","highlight_start":1,"highlight_end":35},{"text":"        inlateout,","highlight_start":1,"highlight_end":19},{"text":"        inline,","highlight_start":1,"highlight_end":16},{"text":"        inline_const,","highlight_start":1,"highlight_end":22},{"text":"        inline_const_pat,","highlight_start":1,"highlight_end":26},{"text":"        inout,","highlight_start":1,"highlight_end":15},{"text":"        instruction_set,","highlight_start":1,"highlight_end":25},{"text":"        intel,","highlight_start":1,"highlight_end":15},{"text":"        into_iter,","highlight_start":1,"highlight_end":19},{"text":"        intra_doc_pointers,","highlight_start":1,"highlight_end":28},{"text":"        intrinsics,","highlight_start":1,"highlight_end":20},{"text":"        irrefutable_let_patterns,","highlight_start":1,"highlight_end":34},{"text":"        isa_attribute,","highlight_start":1,"highlight_end":23},{"text":"        isize,","highlight_start":1,"highlight_end":15},{"text":"        issue,","highlight_start":1,"highlight_end":15},{"text":"        issue_5723_bootstrap,","highlight_start":1,"highlight_end":30},{"text":"        issue_tracker_base_url,","highlight_start":1,"highlight_end":32},{"text":"        item,","highlight_start":1,"highlight_end":14},{"text":"        item_like_imports,","highlight_start":1,"highlight_end":27},{"text":"        iter,","highlight_start":1,"highlight_end":14},{"text":"        iter_repeat,","highlight_start":1,"highlight_end":21},{"text":"        keyword,","highlight_start":1,"highlight_end":17},{"text":"        kind,","highlight_start":1,"highlight_end":14},{"text":"        kreg,","highlight_start":1,"highlight_end":14},{"text":"        label,","highlight_start":1,"highlight_end":15},{"text":"        label_break_value,","highlight_start":1,"highlight_end":27},{"text":"        lang,","highlight_start":1,"highlight_end":14},{"text":"        lang_items,","highlight_start":1,"highlight_end":20},{"text":"        large_assignments,","highlight_start":1,"highlight_end":27},{"text":"        lateout,","highlight_start":1,"highlight_end":17},{"text":"        lazy_normalization_consts,","highlight_start":1,"highlight_end":35},{"text":"        le,","highlight_start":1,"highlight_end":12},{"text":"        len,","highlight_start":1,"highlight_end":13},{"text":"        let_chains,","highlight_start":1,"highlight_end":20},{"text":"        let_else,","highlight_start":1,"highlight_end":18},{"text":"        lhs,","highlight_start":1,"highlight_end":13},{"text":"        lib,","highlight_start":1,"highlight_end":13},{"text":"        libc,","highlight_start":1,"highlight_end":14},{"text":"        lifetime,","highlight_start":1,"highlight_end":18},{"text":"        likely,","highlight_start":1,"highlight_end":16},{"text":"        line,","highlight_start":1,"highlight_end":14},{"text":"        link,","highlight_start":1,"highlight_end":14},{"text":"        link_args,","highlight_start":1,"highlight_end":19},{"text":"        link_cfg,","highlight_start":1,"highlight_end":18},{"text":"        link_llvm_intrinsics,","highlight_start":1,"highlight_end":30},{"text":"        link_name,","highlight_start":1,"highlight_end":19},{"text":"        link_ordinal,","highlight_start":1,"highlight_end":22},{"text":"        link_section,","highlight_start":1,"highlight_end":22},{"text":"        linkage,","highlight_start":1,"highlight_end":17},{"text":"        lint_reasons,","highlight_start":1,"highlight_end":22},{"text":"        literal,","highlight_start":1,"highlight_end":17},{"text":"        llvm_asm,","highlight_start":1,"highlight_end":18},{"text":"        load,","highlight_start":1,"highlight_end":14},{"text":"        local,","highlight_start":1,"highlight_end":15},{"text":"        local_inner_macros,","highlight_start":1,"highlight_end":28},{"text":"        log10f32,","highlight_start":1,"highlight_end":18},{"text":"        log10f64,","highlight_start":1,"highlight_end":18},{"text":"        log2f32,","highlight_start":1,"highlight_end":17},{"text":"        log2f64,","highlight_start":1,"highlight_end":17},{"text":"        log_syntax,","highlight_start":1,"highlight_end":20},{"text":"        logf32,","highlight_start":1,"highlight_end":16},{"text":"        logf64,","highlight_start":1,"highlight_end":16},{"text":"        loop_break_value,","highlight_start":1,"highlight_end":26},{"text":"        lt,","highlight_start":1,"highlight_end":12},{"text":"        macro_at_most_once_rep,","highlight_start":1,"highlight_end":32},{"text":"        macro_attributes_in_derive_output,","highlight_start":1,"highlight_end":43},{"text":"        macro_escape,","highlight_start":1,"highlight_end":22},{"text":"        macro_export,","highlight_start":1,"highlight_end":22},{"text":"        macro_lifetime_matcher,","highlight_start":1,"highlight_end":32},{"text":"        macro_literal_matcher,","highlight_start":1,"highlight_end":31},{"text":"        macro_reexport,","highlight_start":1,"highlight_end":24},{"text":"        macro_use,","highlight_start":1,"highlight_end":19},{"text":"        macro_vis_matcher,","highlight_start":1,"highlight_end":27},{"text":"        macros_in_extern,","highlight_start":1,"highlight_end":26},{"text":"        main,","highlight_start":1,"highlight_end":14},{"text":"        managed_boxes,","highlight_start":1,"highlight_end":23},{"text":"        manually_drop,","highlight_start":1,"highlight_end":23},{"text":"        map,","highlight_start":1,"highlight_end":13},{"text":"        marker,","highlight_start":1,"highlight_end":16},{"text":"        marker_trait_attr,","highlight_start":1,"highlight_end":27},{"text":"        masked,","highlight_start":1,"highlight_end":16},{"text":"        match_beginning_vert,","highlight_start":1,"highlight_end":30},{"text":"        match_default_bindings,","highlight_start":1,"highlight_end":32},{"text":"        maxnumf32,","highlight_start":1,"highlight_end":19},{"text":"        maxnumf64,","highlight_start":1,"highlight_end":19},{"text":"        may_dangle,","highlight_start":1,"highlight_end":20},{"text":"        maybe_uninit,","highlight_start":1,"highlight_end":22},{"text":"        maybe_uninit_uninit,","highlight_start":1,"highlight_end":29},{"text":"        maybe_uninit_zeroed,","highlight_start":1,"highlight_end":29},{"text":"        mem_discriminant,","highlight_start":1,"highlight_end":26},{"text":"        mem_drop,","highlight_start":1,"highlight_end":18},{"text":"        mem_forget,","highlight_start":1,"highlight_end":20},{"text":"        mem_replace,","highlight_start":1,"highlight_end":21},{"text":"        mem_size_of,","highlight_start":1,"highlight_end":21},{"text":"        mem_size_of_val,","highlight_start":1,"highlight_end":25},{"text":"        mem_uninitialized,","highlight_start":1,"highlight_end":27},{"text":"        mem_variant_count,","highlight_start":1,"highlight_end":27},{"text":"        mem_zeroed,","highlight_start":1,"highlight_end":20},{"text":"        member_constraints,","highlight_start":1,"highlight_end":28},{"text":"        memory,","highlight_start":1,"highlight_end":16},{"text":"        message,","highlight_start":1,"highlight_end":17},{"text":"        meta,","highlight_start":1,"highlight_end":14},{"text":"        metadata_type,","highlight_start":1,"highlight_end":23},{"text":"        min_align_of,","highlight_start":1,"highlight_end":22},{"text":"        min_align_of_val,","highlight_start":1,"highlight_end":26},{"text":"        min_const_fn,","highlight_start":1,"highlight_end":22},{"text":"        min_const_generics,","highlight_start":1,"highlight_end":28},{"text":"        min_const_unsafe_fn,","highlight_start":1,"highlight_end":29},{"text":"        min_specialization,","highlight_start":1,"highlight_end":28},{"text":"        min_type_alias_impl_trait,","highlight_start":1,"highlight_end":35},{"text":"        minnumf32,","highlight_start":1,"highlight_end":19},{"text":"        minnumf64,","highlight_start":1,"highlight_end":19},{"text":"        mips_target_feature,","highlight_start":1,"highlight_end":29},{"text":"        misc,","highlight_start":1,"highlight_end":14},{"text":"        mmx_reg,","highlight_start":1,"highlight_end":17},{"text":"        modifiers,","highlight_start":1,"highlight_end":19},{"text":"        module,","highlight_start":1,"highlight_end":16},{"text":"        module_path,","highlight_start":1,"highlight_end":21},{"text":"        more_qualified_paths,","highlight_start":1,"highlight_end":30},{"text":"        more_struct_aliases,","highlight_start":1,"highlight_end":29},{"text":"        movbe_target_feature,","highlight_start":1,"highlight_end":30},{"text":"        move_ref_pattern,","highlight_start":1,"highlight_end":26},{"text":"        move_size_limit,","highlight_start":1,"highlight_end":25},{"text":"        mul,","highlight_start":1,"highlight_end":13},{"text":"        mul_assign,","highlight_start":1,"highlight_end":20},{"text":"        mul_with_overflow,","highlight_start":1,"highlight_end":27},{"text":"        must_not_suspend,","highlight_start":1,"highlight_end":26},{"text":"        must_use,","highlight_start":1,"highlight_end":18},{"text":"        mut_ptr,","highlight_start":1,"highlight_end":17},{"text":"        mut_slice_ptr,","highlight_start":1,"highlight_end":23},{"text":"        naked,","highlight_start":1,"highlight_end":15},{"text":"        naked_functions,","highlight_start":1,"highlight_end":25},{"text":"        name,","highlight_start":1,"highlight_end":14},{"text":"        native_link_modifiers,","highlight_start":1,"highlight_end":31},{"text":"        native_link_modifiers_as_needed,","highlight_start":1,"highlight_end":41},{"text":"        native_link_modifiers_bundle,","highlight_start":1,"highlight_end":38},{"text":"        native_link_modifiers_verbatim,","highlight_start":1,"highlight_end":40},{"text":"        native_link_modifiers_whole_archive,","highlight_start":1,"highlight_end":45},{"text":"        ne,","highlight_start":1,"highlight_end":12},{"text":"        nearbyintf32,","highlight_start":1,"highlight_end":22},{"text":"        nearbyintf64,","highlight_start":1,"highlight_end":22},{"text":"        needs_allocator,","highlight_start":1,"highlight_end":25},{"text":"        needs_drop,","highlight_start":1,"highlight_end":20},{"text":"        needs_panic_runtime,","highlight_start":1,"highlight_end":29},{"text":"        neg,","highlight_start":1,"highlight_end":13},{"text":"        negate_unsigned,","highlight_start":1,"highlight_end":25},{"text":"        negative_impls,","highlight_start":1,"highlight_end":24},{"text":"        never,","highlight_start":1,"highlight_end":15},{"text":"        never_type,","highlight_start":1,"highlight_end":20},{"text":"        never_type_fallback,","highlight_start":1,"highlight_end":29},{"text":"        new,","highlight_start":1,"highlight_end":13},{"text":"        new_unchecked,","highlight_start":1,"highlight_end":23},{"text":"        next,","highlight_start":1,"highlight_end":14},{"text":"        nll,","highlight_start":1,"highlight_end":13},{"text":"        no,","highlight_start":1,"highlight_end":12},{"text":"        no_builtins,","highlight_start":1,"highlight_end":21},{"text":"        no_core,","highlight_start":1,"highlight_end":17},{"text":"        no_coverage,","highlight_start":1,"highlight_end":21},{"text":"        no_crate_inject,","highlight_start":1,"highlight_end":25},{"text":"        no_debug,","highlight_start":1,"highlight_end":18},{"text":"        no_default_passes,","highlight_start":1,"highlight_end":27},{"text":"        no_implicit_prelude,","highlight_start":1,"highlight_end":29},{"text":"        no_inline,","highlight_start":1,"highlight_end":19},{"text":"        no_link,","highlight_start":1,"highlight_end":17},{"text":"        no_main,","highlight_start":1,"highlight_end":17},{"text":"        no_mangle,","highlight_start":1,"highlight_end":19},{"text":"        no_niche,","highlight_start":1,"highlight_end":18},{"text":"        no_sanitize,","highlight_start":1,"highlight_end":21},{"text":"        no_stack_check,","highlight_start":1,"highlight_end":24},{"text":"        no_start,","highlight_start":1,"highlight_end":18},{"text":"        no_std,","highlight_start":1,"highlight_end":16},{"text":"        nomem,","highlight_start":1,"highlight_end":15},{"text":"        non_ascii_idents,","highlight_start":1,"highlight_end":26},{"text":"        non_exhaustive,","highlight_start":1,"highlight_end":24},{"text":"        non_exhaustive_omitted_patterns_lint,","highlight_start":1,"highlight_end":46},{"text":"        non_modrs_mods,","highlight_start":1,"highlight_end":24},{"text":"        none_error,","highlight_start":1,"highlight_end":20},{"text":"        nontemporal_store,","highlight_start":1,"highlight_end":27},{"text":"        noop_method_borrow,","highlight_start":1,"highlight_end":28},{"text":"        noop_method_clone,","highlight_start":1,"highlight_end":27},{"text":"        noop_method_deref,","highlight_start":1,"highlight_end":27},{"text":"        noreturn,","highlight_start":1,"highlight_end":18},{"text":"        nostack,","highlight_start":1,"highlight_end":17},{"text":"        not,","highlight_start":1,"highlight_end":13},{"text":"        notable_trait,","highlight_start":1,"highlight_end":23},{"text":"        note,","highlight_start":1,"highlight_end":14},{"text":"        object_safe_for_dispatch,","highlight_start":1,"highlight_end":34},{"text":"        of,","highlight_start":1,"highlight_end":12},{"text":"        offset,","highlight_start":1,"highlight_end":16},{"text":"        omit_gdb_pretty_printer_section,","highlight_start":1,"highlight_end":41},{"text":"        on,","highlight_start":1,"highlight_end":12},{"text":"        on_unimplemented,","highlight_start":1,"highlight_end":26},{"text":"        oom,","highlight_start":1,"highlight_end":13},{"text":"        opaque,","highlight_start":1,"highlight_end":16},{"text":"        ops,","highlight_start":1,"highlight_end":13},{"text":"        opt_out_copy,","highlight_start":1,"highlight_end":22},{"text":"        optimize,","highlight_start":1,"highlight_end":18},{"text":"        optimize_attribute,","highlight_start":1,"highlight_end":28},{"text":"        optin_builtin_traits,","highlight_start":1,"highlight_end":30},{"text":"        option,","highlight_start":1,"highlight_end":16},{"text":"        option_env,","highlight_start":1,"highlight_end":20},{"text":"        options,","highlight_start":1,"highlight_end":17},{"text":"        or,","highlight_start":1,"highlight_end":12},{"text":"        or_patterns,","highlight_start":1,"highlight_end":21},{"text":"        other,","highlight_start":1,"highlight_end":15},{"text":"        out,","highlight_start":1,"highlight_end":13},{"text":"        overlapping_marker_traits,","highlight_start":1,"highlight_end":35},{"text":"        owned_box,","highlight_start":1,"highlight_end":19},{"text":"        packed,","highlight_start":1,"highlight_end":16},{"text":"        panic,","highlight_start":1,"highlight_end":15},{"text":"        panic_2015,","highlight_start":1,"highlight_end":20},{"text":"        panic_2021,","highlight_start":1,"highlight_end":20},{"text":"        panic_abort,","highlight_start":1,"highlight_end":21},{"text":"        panic_bounds_check,","highlight_start":1,"highlight_end":28},{"text":"        panic_display,","highlight_start":1,"highlight_end":23},{"text":"        panic_fmt,","highlight_start":1,"highlight_end":19},{"text":"        panic_handler,","highlight_start":1,"highlight_end":23},{"text":"        panic_impl,","highlight_start":1,"highlight_end":20},{"text":"        panic_implementation,","highlight_start":1,"highlight_end":30},{"text":"        panic_info,","highlight_start":1,"highlight_end":20},{"text":"        panic_location,","highlight_start":1,"highlight_end":24},{"text":"        panic_runtime,","highlight_start":1,"highlight_end":23},{"text":"        panic_str,","highlight_start":1,"highlight_end":19},{"text":"        panic_unwind,","highlight_start":1,"highlight_end":22},{"text":"        panicking,","highlight_start":1,"highlight_end":19},{"text":"        param_attrs,","highlight_start":1,"highlight_end":21},{"text":"        partial_cmp,","highlight_start":1,"highlight_end":21},{"text":"        partial_ord,","highlight_start":1,"highlight_end":21},{"text":"        passes,","highlight_start":1,"highlight_end":16},{"text":"        pat,","highlight_start":1,"highlight_end":13},{"text":"        pat_param,","highlight_start":1,"highlight_end":19},{"text":"        path,","highlight_start":1,"highlight_end":14},{"text":"        pattern_parentheses,","highlight_start":1,"highlight_end":29},{"text":"        phantom_data,","highlight_start":1,"highlight_end":22},{"text":"        pin,","highlight_start":1,"highlight_end":13},{"text":"        pinned,","highlight_start":1,"highlight_end":16},{"text":"        platform_intrinsics,","highlight_start":1,"highlight_end":29},{"text":"        plugin,","highlight_start":1,"highlight_end":16},{"text":"        plugin_registrar,","highlight_start":1,"highlight_end":26},{"text":"        plugins,","highlight_start":1,"highlight_end":17},{"text":"        pointee_trait,","highlight_start":1,"highlight_end":23},{"text":"        pointer,","highlight_start":1,"highlight_end":17},{"text":"        pointer_trait_fmt,","highlight_start":1,"highlight_end":27},{"text":"        poll,","highlight_start":1,"highlight_end":14},{"text":"        position,","highlight_start":1,"highlight_end":18},{"text":"        post_dash_lto: \"post-lto\",","highlight_start":1,"highlight_end":35},{"text":"        powerpc_target_feature,","highlight_start":1,"highlight_end":32},{"text":"        powf32,","highlight_start":1,"highlight_end":16},{"text":"        powf64,","highlight_start":1,"highlight_end":16},{"text":"        powif32,","highlight_start":1,"highlight_end":17},{"text":"        powif64,","highlight_start":1,"highlight_end":17},{"text":"        pre_dash_lto: \"pre-lto\",","highlight_start":1,"highlight_end":33},{"text":"        precise_pointer_size_matching,","highlight_start":1,"highlight_end":39},{"text":"        precision,","highlight_start":1,"highlight_end":19},{"text":"        pref_align_of,","highlight_start":1,"highlight_end":23},{"text":"        prefetch_read_data,","highlight_start":1,"highlight_end":28},{"text":"        prefetch_read_instruction,","highlight_start":1,"highlight_end":35},{"text":"        prefetch_write_data,","highlight_start":1,"highlight_end":29},{"text":"        prefetch_write_instruction,","highlight_start":1,"highlight_end":36},{"text":"        preg,","highlight_start":1,"highlight_end":14},{"text":"        prelude,","highlight_start":1,"highlight_end":17},{"text":"        prelude_import,","highlight_start":1,"highlight_end":24},{"text":"        preserves_flags,","highlight_start":1,"highlight_end":25},{"text":"        primitive,","highlight_start":1,"highlight_end":19},{"text":"        proc_dash_macro: \"proc-macro\",","highlight_start":1,"highlight_end":39},{"text":"        proc_macro,","highlight_start":1,"highlight_end":20},{"text":"        proc_macro_attribute,","highlight_start":1,"highlight_end":30},{"text":"        proc_macro_def_site,","highlight_start":1,"highlight_end":29},{"text":"        proc_macro_derive,","highlight_start":1,"highlight_end":27},{"text":"        proc_macro_expr,","highlight_start":1,"highlight_end":25},{"text":"        proc_macro_gen,","highlight_start":1,"highlight_end":24},{"text":"        proc_macro_hygiene,","highlight_start":1,"highlight_end":28},{"text":"        proc_macro_internals,","highlight_start":1,"highlight_end":30},{"text":"        proc_macro_mod,","highlight_start":1,"highlight_end":24},{"text":"        proc_macro_non_items,","highlight_start":1,"highlight_end":30},{"text":"        proc_macro_path_invoc,","highlight_start":1,"highlight_end":31},{"text":"        profiler_builtins,","highlight_start":1,"highlight_end":27},{"text":"        profiler_runtime,","highlight_start":1,"highlight_end":26},{"text":"        ptr_guaranteed_eq,","highlight_start":1,"highlight_end":27},{"text":"        ptr_guaranteed_ne,","highlight_start":1,"highlight_end":27},{"text":"        ptr_null,","highlight_start":1,"highlight_end":18},{"text":"        ptr_null_mut,","highlight_start":1,"highlight_end":22},{"text":"        ptr_offset_from,","highlight_start":1,"highlight_end":25},{"text":"        pub_macro_rules,","highlight_start":1,"highlight_end":25},{"text":"        pub_restricted,","highlight_start":1,"highlight_end":24},{"text":"        pure,","highlight_start":1,"highlight_end":14},{"text":"        pushpop_unsafe,","highlight_start":1,"highlight_end":24},{"text":"        qreg,","highlight_start":1,"highlight_end":14},{"text":"        qreg_low4,","highlight_start":1,"highlight_end":19},{"text":"        qreg_low8,","highlight_start":1,"highlight_end":19},{"text":"        quad_precision_float,","highlight_start":1,"highlight_end":30},{"text":"        question_mark,","highlight_start":1,"highlight_end":23},{"text":"        quote,","highlight_start":1,"highlight_end":15},{"text":"        range_inclusive_new,","highlight_start":1,"highlight_end":29},{"text":"        raw_dylib,","highlight_start":1,"highlight_end":19},{"text":"        raw_eq,","highlight_start":1,"highlight_end":16},{"text":"        raw_identifiers,","highlight_start":1,"highlight_end":25},{"text":"        raw_ref_op,","highlight_start":1,"highlight_end":20},{"text":"        re_rebalance_coherence,","highlight_start":1,"highlight_end":32},{"text":"        read_enum,","highlight_start":1,"highlight_end":19},{"text":"        read_enum_variant,","highlight_start":1,"highlight_end":27},{"text":"        read_enum_variant_arg,","highlight_start":1,"highlight_end":31},{"text":"        read_struct,","highlight_start":1,"highlight_end":21},{"text":"        read_struct_field,","highlight_start":1,"highlight_end":27},{"text":"        readonly,","highlight_start":1,"highlight_end":18},{"text":"        realloc,","highlight_start":1,"highlight_end":17},{"text":"        reason,","highlight_start":1,"highlight_end":16},{"text":"        receiver,","highlight_start":1,"highlight_end":18},{"text":"        recursion_limit,","highlight_start":1,"highlight_end":25},{"text":"        reexport_test_harness_main,","highlight_start":1,"highlight_end":36},{"text":"        ref_unwind_safe_trait,","highlight_start":1,"highlight_end":31},{"text":"        reference,","highlight_start":1,"highlight_end":19},{"text":"        reflect,","highlight_start":1,"highlight_end":17},{"text":"        reg,","highlight_start":1,"highlight_end":13},{"text":"        reg16,","highlight_start":1,"highlight_end":15},{"text":"        reg32,","highlight_start":1,"highlight_end":15},{"text":"        reg64,","highlight_start":1,"highlight_end":15},{"text":"        reg_abcd,","highlight_start":1,"highlight_end":18},{"text":"        reg_byte,","highlight_start":1,"highlight_end":18},{"text":"        reg_nonzero,","highlight_start":1,"highlight_end":21},{"text":"        reg_thumb,","highlight_start":1,"highlight_end":19},{"text":"        register_attr,","highlight_start":1,"highlight_end":23},{"text":"        register_tool,","highlight_start":1,"highlight_end":23},{"text":"        relaxed_adts,","highlight_start":1,"highlight_end":22},{"text":"        relaxed_struct_unsize,","highlight_start":1,"highlight_end":31},{"text":"        rem,","highlight_start":1,"highlight_end":13},{"text":"        rem_assign,","highlight_start":1,"highlight_end":20},{"text":"        repr,","highlight_start":1,"highlight_end":14},{"text":"        repr128,","highlight_start":1,"highlight_end":17},{"text":"        repr_align,","highlight_start":1,"highlight_end":20},{"text":"        repr_align_enum,","highlight_start":1,"highlight_end":25},{"text":"        repr_no_niche,","highlight_start":1,"highlight_end":23},{"text":"        repr_packed,","highlight_start":1,"highlight_end":21},{"text":"        repr_simd,","highlight_start":1,"highlight_end":19},{"text":"        repr_transparent,","highlight_start":1,"highlight_end":26},{"text":"        residual,","highlight_start":1,"highlight_end":18},{"text":"        result,","highlight_start":1,"highlight_end":16},{"text":"        rhs,","highlight_start":1,"highlight_end":13},{"text":"        rintf32,","highlight_start":1,"highlight_end":17},{"text":"        rintf64,","highlight_start":1,"highlight_end":17},{"text":"        riscv_target_feature,","highlight_start":1,"highlight_end":30},{"text":"        rlib,","highlight_start":1,"highlight_end":14},{"text":"        rotate_left,","highlight_start":1,"highlight_end":21},{"text":"        rotate_right,","highlight_start":1,"highlight_end":22},{"text":"        roundf32,","highlight_start":1,"highlight_end":18},{"text":"        roundf64,","highlight_start":1,"highlight_end":18},{"text":"        rt,","highlight_start":1,"highlight_end":12},{"text":"        rtm_target_feature,","highlight_start":1,"highlight_end":28},{"text":"        rust,","highlight_start":1,"highlight_end":14},{"text":"        rust_2015,","highlight_start":1,"highlight_end":19},{"text":"        rust_2015_preview,","highlight_start":1,"highlight_end":27},{"text":"        rust_2018,","highlight_start":1,"highlight_end":19},{"text":"        rust_2018_preview,","highlight_start":1,"highlight_end":27},{"text":"        rust_2021,","highlight_start":1,"highlight_end":19},{"text":"        rust_2021_preview,","highlight_start":1,"highlight_end":27},{"text":"        rust_begin_unwind,","highlight_start":1,"highlight_end":27},{"text":"        rust_eh_catch_typeinfo,","highlight_start":1,"highlight_end":32},{"text":"        rust_eh_personality,","highlight_start":1,"highlight_end":29},{"text":"        rust_eh_register_frames,","highlight_start":1,"highlight_end":33},{"text":"        rust_eh_unregister_frames,","highlight_start":1,"highlight_end":35},{"text":"        rust_oom,","highlight_start":1,"highlight_end":18},{"text":"        rustc,","highlight_start":1,"highlight_end":15},{"text":"        rustc_allocator,","highlight_start":1,"highlight_end":25},{"text":"        rustc_allocator_nounwind,","highlight_start":1,"highlight_end":34},{"text":"        rustc_allow_const_fn_unstable,","highlight_start":1,"highlight_end":39},{"text":"        rustc_attrs,","highlight_start":1,"highlight_end":21},{"text":"        rustc_builtin_macro,","highlight_start":1,"highlight_end":29},{"text":"        rustc_capture_analysis,","highlight_start":1,"highlight_end":32},{"text":"        rustc_clean,","highlight_start":1,"highlight_end":21},{"text":"        rustc_const_stable,","highlight_start":1,"highlight_end":28},{"text":"        rustc_const_unstable,","highlight_start":1,"highlight_end":30},{"text":"        rustc_conversion_suggestion,","highlight_start":1,"highlight_end":37},{"text":"        rustc_def_path,","highlight_start":1,"highlight_end":24},{"text":"        rustc_deprecated,","highlight_start":1,"highlight_end":26},{"text":"        rustc_diagnostic_item,","highlight_start":1,"highlight_end":31},{"text":"        rustc_diagnostic_macros,","highlight_start":1,"highlight_end":33},{"text":"        rustc_dirty,","highlight_start":1,"highlight_end":21},{"text":"        rustc_do_not_const_check,","highlight_start":1,"highlight_end":34},{"text":"        rustc_dummy,","highlight_start":1,"highlight_end":21},{"text":"        rustc_dump_env_program_clauses,","highlight_start":1,"highlight_end":40},{"text":"        rustc_dump_program_clauses,","highlight_start":1,"highlight_end":36},{"text":"        rustc_dump_user_substs,","highlight_start":1,"highlight_end":32},{"text":"        rustc_dump_vtable,","highlight_start":1,"highlight_end":27},{"text":"        rustc_error,","highlight_start":1,"highlight_end":21},{"text":"        rustc_evaluate_where_clauses,","highlight_start":1,"highlight_end":38},{"text":"        rustc_expected_cgu_reuse,","highlight_start":1,"highlight_end":34},{"text":"        rustc_if_this_changed,","highlight_start":1,"highlight_end":31},{"text":"        rustc_inherit_overflow_checks,","highlight_start":1,"highlight_end":39},{"text":"        rustc_insignificant_dtor,","highlight_start":1,"highlight_end":34},{"text":"        rustc_layout,","highlight_start":1,"highlight_end":22},{"text":"        rustc_layout_scalar_valid_range_end,","highlight_start":1,"highlight_end":45},{"text":"        rustc_layout_scalar_valid_range_start,","highlight_start":1,"highlight_end":47},{"text":"        rustc_legacy_const_generics,","highlight_start":1,"highlight_end":37},{"text":"        rustc_macro_transparency,","highlight_start":1,"highlight_end":34},{"text":"        rustc_main,","highlight_start":1,"highlight_end":20},{"text":"        rustc_mir,","highlight_start":1,"highlight_end":19},{"text":"        rustc_nonnull_optimization_guaranteed,","highlight_start":1,"highlight_end":47},{"text":"        rustc_object_lifetime_default,","highlight_start":1,"highlight_end":39},{"text":"        rustc_on_unimplemented,","highlight_start":1,"highlight_end":32},{"text":"        rustc_outlives,","highlight_start":1,"highlight_end":24},{"text":"        rustc_paren_sugar,","highlight_start":1,"highlight_end":27},{"text":"        rustc_partition_codegened,","highlight_start":1,"highlight_end":35},{"text":"        rustc_partition_reused,","highlight_start":1,"highlight_end":32},{"text":"        rustc_peek,","highlight_start":1,"highlight_end":20},{"text":"        rustc_peek_definite_init,","highlight_start":1,"highlight_end":34},{"text":"        rustc_peek_liveness,","highlight_start":1,"highlight_end":29},{"text":"        rustc_peek_maybe_init,","highlight_start":1,"highlight_end":31},{"text":"        rustc_peek_maybe_uninit,","highlight_start":1,"highlight_end":33},{"text":"        rustc_polymorphize_error,","highlight_start":1,"highlight_end":34},{"text":"        rustc_private,","highlight_start":1,"highlight_end":23},{"text":"        rustc_proc_macro_decls,","highlight_start":1,"highlight_end":32},{"text":"        rustc_promotable,","highlight_start":1,"highlight_end":26},{"text":"        rustc_regions,","highlight_start":1,"highlight_end":23},{"text":"        rustc_reservation_impl,","highlight_start":1,"highlight_end":32},{"text":"        rustc_serialize,","highlight_start":1,"highlight_end":25},{"text":"        rustc_skip_array_during_method_dispatch,","highlight_start":1,"highlight_end":49},{"text":"        rustc_specialization_trait,","highlight_start":1,"highlight_end":36},{"text":"        rustc_stable,","highlight_start":1,"highlight_end":22},{"text":"        rustc_std_internal_symbol,","highlight_start":1,"highlight_end":35},{"text":"        rustc_strict_coherence,","highlight_start":1,"highlight_end":32},{"text":"        rustc_symbol_name,","highlight_start":1,"highlight_end":27},{"text":"        rustc_test_marker,","highlight_start":1,"highlight_end":27},{"text":"        rustc_then_this_would_need,","highlight_start":1,"highlight_end":36},{"text":"        rustc_trivial_field_reads,","highlight_start":1,"highlight_end":35},{"text":"        rustc_unsafe_specialization_marker,","highlight_start":1,"highlight_end":44},{"text":"        rustc_variance,","highlight_start":1,"highlight_end":24},{"text":"        rustdoc,","highlight_start":1,"highlight_end":17},{"text":"        rustdoc_internals,","highlight_start":1,"highlight_end":27},{"text":"        rustfmt,","highlight_start":1,"highlight_end":17},{"text":"        rvalue_static_promotion,","highlight_start":1,"highlight_end":33},{"text":"        s,","highlight_start":1,"highlight_end":11},{"text":"        sanitize,","highlight_start":1,"highlight_end":18},{"text":"        sanitizer_runtime,","highlight_start":1,"highlight_end":27},{"text":"        saturating_add,","highlight_start":1,"highlight_end":24},{"text":"        saturating_sub,","highlight_start":1,"highlight_end":24},{"text":"        self_in_typedefs,","highlight_start":1,"highlight_end":26},{"text":"        self_struct_ctor,","highlight_start":1,"highlight_end":26},{"text":"        semitransparent,","highlight_start":1,"highlight_end":25},{"text":"        shl,","highlight_start":1,"highlight_end":13},{"text":"        shl_assign,","highlight_start":1,"highlight_end":20},{"text":"        should_panic,","highlight_start":1,"highlight_end":22},{"text":"        shr,","highlight_start":1,"highlight_end":13},{"text":"        shr_assign,","highlight_start":1,"highlight_end":20},{"text":"        simd,","highlight_start":1,"highlight_end":14},{"text":"        simd_add,","highlight_start":1,"highlight_end":18},{"text":"        simd_and,","highlight_start":1,"highlight_end":18},{"text":"        simd_bitmask,","highlight_start":1,"highlight_end":22},{"text":"        simd_cast,","highlight_start":1,"highlight_end":19},{"text":"        simd_ceil,","highlight_start":1,"highlight_end":19},{"text":"        simd_div,","highlight_start":1,"highlight_end":18},{"text":"        simd_eq,","highlight_start":1,"highlight_end":17},{"text":"        simd_extract,","highlight_start":1,"highlight_end":22},{"text":"        simd_fabs,","highlight_start":1,"highlight_end":19},{"text":"        simd_fcos,","highlight_start":1,"highlight_end":19},{"text":"        simd_fexp,","highlight_start":1,"highlight_end":19},{"text":"        simd_fexp2,","highlight_start":1,"highlight_end":20},{"text":"        simd_ffi,","highlight_start":1,"highlight_end":18},{"text":"        simd_flog,","highlight_start":1,"highlight_end":19},{"text":"        simd_flog10,","highlight_start":1,"highlight_end":21},{"text":"        simd_flog2,","highlight_start":1,"highlight_end":20},{"text":"        simd_floor,","highlight_start":1,"highlight_end":20},{"text":"        simd_fma,","highlight_start":1,"highlight_end":18},{"text":"        simd_fmax,","highlight_start":1,"highlight_end":19},{"text":"        simd_fmin,","highlight_start":1,"highlight_end":19},{"text":"        simd_fpow,","highlight_start":1,"highlight_end":19},{"text":"        simd_fpowi,","highlight_start":1,"highlight_end":20},{"text":"        simd_fsin,","highlight_start":1,"highlight_end":19},{"text":"        simd_fsqrt,","highlight_start":1,"highlight_end":20},{"text":"        simd_gather,","highlight_start":1,"highlight_end":21},{"text":"        simd_ge,","highlight_start":1,"highlight_end":17},{"text":"        simd_gt,","highlight_start":1,"highlight_end":17},{"text":"        simd_insert,","highlight_start":1,"highlight_end":21},{"text":"        simd_le,","highlight_start":1,"highlight_end":17},{"text":"        simd_lt,","highlight_start":1,"highlight_end":17},{"text":"        simd_mul,","highlight_start":1,"highlight_end":18},{"text":"        simd_ne,","highlight_start":1,"highlight_end":17},{"text":"        simd_neg,","highlight_start":1,"highlight_end":18},{"text":"        simd_or,","highlight_start":1,"highlight_end":17},{"text":"        simd_reduce_add_ordered,","highlight_start":1,"highlight_end":33},{"text":"        simd_reduce_add_unordered,","highlight_start":1,"highlight_end":35},{"text":"        simd_reduce_all,","highlight_start":1,"highlight_end":25},{"text":"        simd_reduce_and,","highlight_start":1,"highlight_end":25},{"text":"        simd_reduce_any,","highlight_start":1,"highlight_end":25},{"text":"        simd_reduce_max,","highlight_start":1,"highlight_end":25},{"text":"        simd_reduce_max_nanless,","highlight_start":1,"highlight_end":33},{"text":"        simd_reduce_min,","highlight_start":1,"highlight_end":25},{"text":"        simd_reduce_min_nanless,","highlight_start":1,"highlight_end":33},{"text":"        simd_reduce_mul_ordered,","highlight_start":1,"highlight_end":33},{"text":"        simd_reduce_mul_unordered,","highlight_start":1,"highlight_end":35},{"text":"        simd_reduce_or,","highlight_start":1,"highlight_end":24},{"text":"        simd_reduce_xor,","highlight_start":1,"highlight_end":25},{"text":"        simd_rem,","highlight_start":1,"highlight_end":18},{"text":"        simd_round,","highlight_start":1,"highlight_end":20},{"text":"        simd_saturating_add,","highlight_start":1,"highlight_end":29},{"text":"        simd_saturating_sub,","highlight_start":1,"highlight_end":29},{"text":"        simd_scatter,","highlight_start":1,"highlight_end":22},{"text":"        simd_select,","highlight_start":1,"highlight_end":21},{"text":"        simd_select_bitmask,","highlight_start":1,"highlight_end":29},{"text":"        simd_shl,","highlight_start":1,"highlight_end":18},{"text":"        simd_shr,","highlight_start":1,"highlight_end":18},{"text":"        simd_shuffle,","highlight_start":1,"highlight_end":22},{"text":"        simd_sub,","highlight_start":1,"highlight_end":18},{"text":"        simd_trunc,","highlight_start":1,"highlight_end":20},{"text":"        simd_xor,","highlight_start":1,"highlight_end":18},{"text":"        since,","highlight_start":1,"highlight_end":15},{"text":"        sinf32,","highlight_start":1,"highlight_end":16},{"text":"        sinf64,","highlight_start":1,"highlight_end":16},{"text":"        size,","highlight_start":1,"highlight_end":14},{"text":"        size_of,","highlight_start":1,"highlight_end":17},{"text":"        size_of_val,","highlight_start":1,"highlight_end":21},{"text":"        sized,","highlight_start":1,"highlight_end":15},{"text":"        skip,","highlight_start":1,"highlight_end":14},{"text":"        slice,","highlight_start":1,"highlight_end":15},{"text":"        slice_alloc,","highlight_start":1,"highlight_end":21},{"text":"        slice_len_fn,","highlight_start":1,"highlight_end":22},{"text":"        slice_patterns,","highlight_start":1,"highlight_end":24},{"text":"        slice_u8,","highlight_start":1,"highlight_end":18},{"text":"        slice_u8_alloc,","highlight_start":1,"highlight_end":24},{"text":"        slicing_syntax,","highlight_start":1,"highlight_end":24},{"text":"        soft,","highlight_start":1,"highlight_end":14},{"text":"        specialization,","highlight_start":1,"highlight_end":24},{"text":"        speed,","highlight_start":1,"highlight_end":15},{"text":"        spotlight,","highlight_start":1,"highlight_end":19},{"text":"        sqrtf32,","highlight_start":1,"highlight_end":17},{"text":"        sqrtf64,","highlight_start":1,"highlight_end":17},{"text":"        sreg,","highlight_start":1,"highlight_end":14},{"text":"        sreg_low16,","highlight_start":1,"highlight_end":20},{"text":"        sse4a_target_feature,","highlight_start":1,"highlight_end":30},{"text":"        stable,","highlight_start":1,"highlight_end":16},{"text":"        staged_api,","highlight_start":1,"highlight_end":20},{"text":"        start,","highlight_start":1,"highlight_end":15},{"text":"        state,","highlight_start":1,"highlight_end":15},{"text":"        static_in_const,","highlight_start":1,"highlight_end":25},{"text":"        static_nobundle,","highlight_start":1,"highlight_end":25},{"text":"        static_recursion,","highlight_start":1,"highlight_end":26},{"text":"        staticlib,","highlight_start":1,"highlight_end":19},{"text":"        std,","highlight_start":1,"highlight_end":13},{"text":"        std_inject,","highlight_start":1,"highlight_end":20},{"text":"        std_panic,","highlight_start":1,"highlight_end":19},{"text":"        std_panic_2015_macro,","highlight_start":1,"highlight_end":30},{"text":"        std_panic_macro,","highlight_start":1,"highlight_end":25},{"text":"        stmt,","highlight_start":1,"highlight_end":14},{"text":"        stmt_expr_attributes,","highlight_start":1,"highlight_end":30},{"text":"        stop_after_dataflow,","highlight_start":1,"highlight_end":29},{"text":"        store,","highlight_start":1,"highlight_end":15},{"text":"        str,","highlight_start":1,"highlight_end":13},{"text":"        str_alloc,","highlight_start":1,"highlight_end":19},{"text":"        stringify,","highlight_start":1,"highlight_end":19},{"text":"        struct_field_attributes,","highlight_start":1,"highlight_end":33},{"text":"        struct_inherit,","highlight_start":1,"highlight_end":24},{"text":"        struct_variant,","highlight_start":1,"highlight_end":24},{"text":"        structural_match,","highlight_start":1,"highlight_end":26},{"text":"        structural_peq,","highlight_start":1,"highlight_end":24},{"text":"        structural_teq,","highlight_start":1,"highlight_end":24},{"text":"        sty,","highlight_start":1,"highlight_end":13},{"text":"        sub,","highlight_start":1,"highlight_end":13},{"text":"        sub_assign,","highlight_start":1,"highlight_end":20},{"text":"        sub_with_overflow,","highlight_start":1,"highlight_end":27},{"text":"        suggestion,","highlight_start":1,"highlight_end":20},{"text":"        sym,","highlight_start":1,"highlight_end":13},{"text":"        sync,","highlight_start":1,"highlight_end":14},{"text":"        t32,","highlight_start":1,"highlight_end":13},{"text":"        target_abi,","highlight_start":1,"highlight_end":20},{"text":"        target_arch,","highlight_start":1,"highlight_end":21},{"text":"        target_endian,","highlight_start":1,"highlight_end":23},{"text":"        target_env,","highlight_start":1,"highlight_end":20},{"text":"        target_family,","highlight_start":1,"highlight_end":23},{"text":"        target_feature,","highlight_start":1,"highlight_end":24},{"text":"        target_feature_11,","highlight_start":1,"highlight_end":27},{"text":"        target_has_atomic,","highlight_start":1,"highlight_end":27},{"text":"        target_has_atomic_equal_alignment,","highlight_start":1,"highlight_end":43},{"text":"        target_has_atomic_load_store,","highlight_start":1,"highlight_end":38},{"text":"        target_os,","highlight_start":1,"highlight_end":19},{"text":"        target_pointer_width,","highlight_start":1,"highlight_end":30},{"text":"        target_target_vendor,","highlight_start":1,"highlight_end":30},{"text":"        target_thread_local,","highlight_start":1,"highlight_end":29},{"text":"        target_vendor,","highlight_start":1,"highlight_end":23},{"text":"        task,","highlight_start":1,"highlight_end":14},{"text":"        tbm_target_feature,","highlight_start":1,"highlight_end":28},{"text":"        termination,","highlight_start":1,"highlight_end":21},{"text":"        termination_trait,","highlight_start":1,"highlight_end":27},{"text":"        termination_trait_test,","highlight_start":1,"highlight_end":32},{"text":"        test,","highlight_start":1,"highlight_end":14},{"text":"        test_2018_feature,","highlight_start":1,"highlight_end":27},{"text":"        test_accepted_feature,","highlight_start":1,"highlight_end":31},{"text":"        test_case,","highlight_start":1,"highlight_end":19},{"text":"        test_removed_feature,","highlight_start":1,"highlight_end":30},{"text":"        test_runner,","highlight_start":1,"highlight_end":21},{"text":"        then_with,","highlight_start":1,"highlight_end":19},{"text":"        thread,","highlight_start":1,"highlight_end":16},{"text":"        thread_local,","highlight_start":1,"highlight_end":22},{"text":"        tool_attributes,","highlight_start":1,"highlight_end":25},{"text":"        tool_lints,","highlight_start":1,"highlight_end":20},{"text":"        trace_macros,","highlight_start":1,"highlight_end":22},{"text":"        track_caller,","highlight_start":1,"highlight_end":22},{"text":"        trait_alias,","highlight_start":1,"highlight_end":21},{"text":"        trait_upcasting,","highlight_start":1,"highlight_end":25},{"text":"        transmute,","highlight_start":1,"highlight_end":19},{"text":"        transparent,","highlight_start":1,"highlight_end":21},{"text":"        transparent_enums,","highlight_start":1,"highlight_end":27},{"text":"        transparent_unions,","highlight_start":1,"highlight_end":28},{"text":"        trivial_bounds,","highlight_start":1,"highlight_end":24},{"text":"        truncf32,","highlight_start":1,"highlight_end":18},{"text":"        truncf64,","highlight_start":1,"highlight_end":18},{"text":"        try_blocks,","highlight_start":1,"highlight_end":20},{"text":"        try_from,","highlight_start":1,"highlight_end":18},{"text":"        try_into,","highlight_start":1,"highlight_end":18},{"text":"        try_trait_v2,","highlight_start":1,"highlight_end":22},{"text":"        tt,","highlight_start":1,"highlight_end":12},{"text":"        tuple,","highlight_start":1,"highlight_end":15},{"text":"        tuple_from_req,","highlight_start":1,"highlight_end":24},{"text":"        tuple_indexing,","highlight_start":1,"highlight_end":24},{"text":"        two_phase,","highlight_start":1,"highlight_end":19},{"text":"        ty,","highlight_start":1,"highlight_end":12},{"text":"        type_alias_enum_variants,","highlight_start":1,"highlight_end":34},{"text":"        type_alias_impl_trait,","highlight_start":1,"highlight_end":31},{"text":"        type_ascription,","highlight_start":1,"highlight_end":25},{"text":"        type_changing_struct_update,","highlight_start":1,"highlight_end":37},{"text":"        type_id,","highlight_start":1,"highlight_end":17},{"text":"        type_length_limit,","highlight_start":1,"highlight_end":27},{"text":"        type_macros,","highlight_start":1,"highlight_end":21},{"text":"        type_name,","highlight_start":1,"highlight_end":19},{"text":"        u128,","highlight_start":1,"highlight_end":14},{"text":"        u16,","highlight_start":1,"highlight_end":13},{"text":"        u32,","highlight_start":1,"highlight_end":13},{"text":"        u64,","highlight_start":1,"highlight_end":13},{"text":"        u8,","highlight_start":1,"highlight_end":12},{"text":"        unaligned_volatile_load,","highlight_start":1,"highlight_end":33},{"text":"        unaligned_volatile_store,","highlight_start":1,"highlight_end":34},{"text":"        unboxed_closures,","highlight_start":1,"highlight_end":26},{"text":"        unchecked_add,","highlight_start":1,"highlight_end":23},{"text":"        unchecked_div,","highlight_start":1,"highlight_end":23},{"text":"        unchecked_mul,","highlight_start":1,"highlight_end":23},{"text":"        unchecked_rem,","highlight_start":1,"highlight_end":23},{"text":"        unchecked_shl,","highlight_start":1,"highlight_end":23},{"text":"        unchecked_shr,","highlight_start":1,"highlight_end":23},{"text":"        unchecked_sub,","highlight_start":1,"highlight_end":23},{"text":"        underscore_const_names,","highlight_start":1,"highlight_end":32},{"text":"        underscore_imports,","highlight_start":1,"highlight_end":28},{"text":"        underscore_lifetimes,","highlight_start":1,"highlight_end":30},{"text":"        uniform_paths,","highlight_start":1,"highlight_end":23},{"text":"        unit,","highlight_start":1,"highlight_end":14},{"text":"        universal_impl_trait,","highlight_start":1,"highlight_end":30},{"text":"        unix,","highlight_start":1,"highlight_end":14},{"text":"        unlikely,","highlight_start":1,"highlight_end":18},{"text":"        unmarked_api,","highlight_start":1,"highlight_end":22},{"text":"        unpin,","highlight_start":1,"highlight_end":15},{"text":"        unreachable,","highlight_start":1,"highlight_end":21},{"text":"        unreachable_code,","highlight_start":1,"highlight_end":26},{"text":"        unrestricted_attribute_tokens,","highlight_start":1,"highlight_end":39},{"text":"        unsafe_block_in_unsafe_fn,","highlight_start":1,"highlight_end":35},{"text":"        unsafe_cell,","highlight_start":1,"highlight_end":21},{"text":"        unsafe_no_drop_flag,","highlight_start":1,"highlight_end":29},{"text":"        unsize,","highlight_start":1,"highlight_end":16},{"text":"        unsized_fn_params,","highlight_start":1,"highlight_end":27},{"text":"        unsized_locals,","highlight_start":1,"highlight_end":24},{"text":"        unsized_tuple_coercion,","highlight_start":1,"highlight_end":32},{"text":"        unstable,","highlight_start":1,"highlight_end":18},{"text":"        untagged_unions,","highlight_start":1,"highlight_end":25},{"text":"        unused_qualifications,","highlight_start":1,"highlight_end":31},{"text":"        unwind,","highlight_start":1,"highlight_end":16},{"text":"        unwind_attributes,","highlight_start":1,"highlight_end":27},{"text":"        unwind_safe_trait,","highlight_start":1,"highlight_end":27},{"text":"        unwrap,","highlight_start":1,"highlight_end":16},{"text":"        unwrap_or,","highlight_start":1,"highlight_end":19},{"text":"        use_extern_macros,","highlight_start":1,"highlight_end":27},{"text":"        use_nested_groups,","highlight_start":1,"highlight_end":27},{"text":"        used,","highlight_start":1,"highlight_end":14},{"text":"        usize,","highlight_start":1,"highlight_end":15},{"text":"        v1,","highlight_start":1,"highlight_end":12},{"text":"        va_arg,","highlight_start":1,"highlight_end":16},{"text":"        va_copy,","highlight_start":1,"highlight_end":17},{"text":"        va_end,","highlight_start":1,"highlight_end":16},{"text":"        va_list,","highlight_start":1,"highlight_end":17},{"text":"        va_start,","highlight_start":1,"highlight_end":18},{"text":"        val,","highlight_start":1,"highlight_end":13},{"text":"        // var,","highlight_start":1,"highlight_end":16},{"text":"        variant_count,","highlight_start":1,"highlight_end":23},{"text":"        vec,","highlight_start":1,"highlight_end":13},{"text":"        version,","highlight_start":1,"highlight_end":17},{"text":"        vis,","highlight_start":1,"highlight_end":13},{"text":"        visible_private_types,","highlight_start":1,"highlight_end":31},{"text":"        volatile,","highlight_start":1,"highlight_end":18},{"text":"        volatile_copy_memory,","highlight_start":1,"highlight_end":30},{"text":"        volatile_copy_nonoverlapping_memory,","highlight_start":1,"highlight_end":45},{"text":"        volatile_load,","highlight_start":1,"highlight_end":23},{"text":"        volatile_set_memory,","highlight_start":1,"highlight_end":29},{"text":"        volatile_store,","highlight_start":1,"highlight_end":24},{"text":"        vreg,","highlight_start":1,"highlight_end":14},{"text":"        vreg_low16,","highlight_start":1,"highlight_end":20},{"text":"        warn,","highlight_start":1,"highlight_end":14},{"text":"        wasm_abi,","highlight_start":1,"highlight_end":18},{"text":"        wasm_import_module,","highlight_start":1,"highlight_end":28},{"text":"        wasm_target_feature,","highlight_start":1,"highlight_end":29},{"text":"        while_let,","highlight_start":1,"highlight_end":19},{"text":"        width,","highlight_start":1,"highlight_end":15},{"text":"        windows,","highlight_start":1,"highlight_end":17},{"text":"        windows_subsystem,","highlight_start":1,"highlight_end":27},{"text":"        wrapping_add,","highlight_start":1,"highlight_end":22},{"text":"        wrapping_mul,","highlight_start":1,"highlight_end":22},{"text":"        wrapping_sub,","highlight_start":1,"highlight_end":22},{"text":"        wreg,","highlight_start":1,"highlight_end":14},{"text":"        write_bytes,","highlight_start":1,"highlight_end":21},{"text":"        write_str,","highlight_start":1,"highlight_end":19},{"text":"        x87_reg,","highlight_start":1,"highlight_end":17},{"text":"        xer,","highlight_start":1,"highlight_end":13},{"text":"        xmm_reg,","highlight_start":1,"highlight_end":17},{"text":"        ymm_reg,","highlight_start":1,"highlight_end":17},{"text":"        zmm_reg,","highlight_start":1,"highlight_end":17},{"text":"    }","highlight_start":1,"highlight_end":6},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"symbols!","def_site_span":{"file_name":"D:\\work\\lenguaje-latino\\latinoc\\compiler\\rustc_macros\\src\\lib.rs","byte_start":394,"byte_end":443,"line_start":23,"line_end":23,"column_start":1,"column_end":50,"is_primary":false,"text":[{"text":"pub fn symbols(input: TokenStream) -> TokenStream {","highlight_start":1,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},{"file_name":"src\\parser\\stmt.rs","byte_start":2795,"byte_end":2798,"line_start":68,"line_end":68,"column_start":53,"column_end":56,"is_primary":true,"text":[{"text":"        } else if self.is_kw_followed_by_ident(sym::var) {","highlight_start":53,"highlight_end":56}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"a constant with a similar name exists","code":null,"level":"help","spans":[{"file_name":"src\\parser\\stmt.rs","byte_start":2795,"byte_end":2798,"line_start":68,"line_end":68,"column_start":53,"column_end":56,"is_primary":true,"text":[{"text":"        } else if self.is_kw_followed_by_ident(sym::var) {","highlight_start":53,"highlight_end":56}],"label":null,"suggested_replacement":"val","suggestion_applicability":"MaybeIncorrect","expansion":null}],"children":[],"rendered":null},{"message":"consider importing this function","code":null,"level":"help","spans":[{"file_name":"src\\parser\\stmt.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::attr::DEFAULT_INNER_ATTR_FORBIDDEN;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use std::env::var;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: cannot find value `var` in module `sym`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\parser\\stmt.rs:68:53\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m68\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m  \u001b[0m\u001b[0m        } else if self.is_kw_followed_by_ident(sym::var) {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m::: \u001b[0m\u001b[0mD:\\work\\lenguaje-latino\\latinoc\\compiler\\rustc_span\\src\\symbol.rs:23:1\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m23\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m/\u001b[0m\u001b[0m \u001b[0m\u001b[0msymbols! {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m24\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    // After modifying this list adjust `is_special`, `is_used_keyword`/`is_unused_keyword`,\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m25\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    // this should be rarely necessary though if the keywords are kept in alphabetic order.\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m26\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    Keywords {\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m...\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1447\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    }\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1448\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m}\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|_-\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14msimilarly named constant `val` defined here\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: a constant with a similar name exists\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m68\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        } else if self.is_kw_followed_by_ident(sym::\u001b[0m\u001b[0m\u001b[38;5;10mval\u001b[0m\u001b[0m) {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[38;5;10m~~~\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing this function\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[38;5;10muse std::env::var;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"message":"cannot find value `Typeof` in module `kw`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"src\\parser\\ty.rs","byte_start":7807,"byte_end":7813,"line_start":228,"line_end":228,"column_start":49,"column_end":55,"is_primary":true,"text":[{"text":"        } else if self.eat_keyword_noexpect(kw::Typeof) {","highlight_start":49,"highlight_end":55}],"label":"not found in `kw`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing one of these items","code":null,"level":"help","spans":[{"file_name":"src\\parser\\ty.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::{Parser, PathStyle, TokenType};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::parser::ty::TyKind::Typeof;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"src\\parser\\ty.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::{Parser, PathStyle, TokenType};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use rustc_ast::TyKind::Typeof;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: cannot find value `Typeof` in module `kw`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\parser\\ty.rs:228:49\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m228\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        } else if self.eat_keyword_noexpect(kw::Typeof) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `kw`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing one of these items\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[38;5;10muse crate::parser::ty::TyKind::Typeof;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[38;5;10muse rustc_ast::TyKind::Typeof;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"message":"cannot find value `Dyn` in module `kw`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"src\\parser\\ty.rs","byte_start":20599,"byte_end":20602,"line_start":529,"line_end":529,"column_start":32,"column_end":35,"is_primary":true,"text":[{"text":"        self.check_keyword(kw::Dyn)","highlight_start":32,"highlight_end":35}],"label":"not found in `kw`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing one of these items","code":null,"level":"help","spans":[{"file_name":"src\\parser\\ty.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::{Parser, PathStyle, TokenType};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::parser::ty::TraitObjectSyntax::Dyn;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"src\\parser\\ty.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::{Parser, PathStyle, TokenType};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use rustc_ast::TraitObjectSyntax::Dyn;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: cannot find value `Dyn` in module `kw`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\parser\\ty.rs:529:32\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m529\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        self.check_keyword(kw::Dyn)\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                               \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `kw`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing one of these items\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[38;5;10muse crate::parser::ty::TraitObjectSyntax::Dyn;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[38;5;10muse rustc_ast::TraitObjectSyntax::Dyn;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"message":"cannot find value `Dyn` in module `kw`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"src\\parser\\ty.rs","byte_start":23343,"byte_end":23346,"line_start":605,"line_end":605,"column_start":67,"column_end":70,"is_primary":true,"text":[{"text":"        while self.can_begin_bound() || self.token.is_keyword(kw::Dyn) {","highlight_start":67,"highlight_end":70}],"label":"not found in `kw`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing one of these items","code":null,"level":"help","spans":[{"file_name":"src\\parser\\ty.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::{Parser, PathStyle, TokenType};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::parser::ty::TraitObjectSyntax::Dyn;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"src\\parser\\ty.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::{Parser, PathStyle, TokenType};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use rustc_ast::TraitObjectSyntax::Dyn;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: cannot find value `Dyn` in module `kw`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\parser\\ty.rs:605:67\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m605\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        while self.can_begin_bound() || self.token.is_keyword(kw::Dyn) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                                                  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `kw`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing one of these items\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[38;5;10muse crate::parser::ty::TraitObjectSyntax::Dyn;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[38;5;10muse rustc_ast::TraitObjectSyntax::Dyn;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"message":"cannot find value `Dyn` in module `kw`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"src\\parser\\ty.rs","byte_start":23391,"byte_end":23394,"line_start":606,"line_end":606,"column_start":42,"column_end":45,"is_primary":true,"text":[{"text":"            if self.token.is_keyword(kw::Dyn) {","highlight_start":42,"highlight_end":45}],"label":"not found in `kw`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing one of these items","code":null,"level":"help","spans":[{"file_name":"src\\parser\\ty.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::{Parser, PathStyle, TokenType};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::parser::ty::TraitObjectSyntax::Dyn;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"src\\parser\\ty.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use super::{Parser, PathStyle, TokenType};","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use rustc_ast::TraitObjectSyntax::Dyn;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: cannot find value `Dyn` in module `kw`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\parser\\ty.rs:606:42\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m606\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m            if self.token.is_keyword(kw::Dyn) {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `kw`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing one of these items\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[38;5;10muse crate::parser::ty::TraitObjectSyntax::Dyn;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[38;5;10muse rustc_ast::TraitObjectSyntax::Dyn;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"message":"cannot find value `Mut` in module `kw`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"src\\parser\\mod.rs","byte_start":40633,"byte_end":40636,"line_start":1168,"line_end":1168,"column_start":33,"column_end":36,"is_primary":true,"text":[{"text":"        if self.eat_keyword(kw::Mut) {","highlight_start":33,"highlight_end":36}],"label":"not found in `kw`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing one of these items","code":null,"level":"help","spans":[{"file_name":"src\\parser\\mod.rs","byte_start":138,"byte_end":138,"line_start":13,"line_end":13,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use crate::lexer::UnmatchedBrace;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::parser::Mutability::Mut;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"src\\parser\\mod.rs","byte_start":138,"byte_end":138,"line_start":13,"line_end":13,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use crate::lexer::UnmatchedBrace;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use rustc_ast::Mutability::Mut;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: cannot find value `Mut` in module `kw`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\parser\\mod.rs:1168:33\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1168\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        if self.eat_keyword(kw::Mut) {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `kw`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing one of these items\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m13\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[38;5;10muse crate::parser::Mutability::Mut;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m13\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[38;5;10muse rustc_ast::Mutability::Mut;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"message":"cannot find value `Mut` in module `kw`","code":{"code":"E0425","explanation":"An unresolved name was used.\n\nErroneous code examples:\n\n```compile_fail,E0425\nsomething_that_doesnt_exist::foo;\n// error: unresolved name `something_that_doesnt_exist::foo`\n\n// or:\n\ntrait Foo {\n    fn bar() {\n        Self; // error: unresolved name `Self`\n    }\n}\n\n// or:\n\nlet x = unknown_variable;  // error: unresolved name `unknown_variable`\n```\n\nPlease verify that the name wasn't misspelled and ensure that the\nidentifier being referred to is valid for the given situation. Example:\n\n```\nenum something_that_does_exist {\n    Foo,\n}\n```\n\nOr:\n\n```\nmod something_that_does_exist {\n    pub static foo : i32 = 0i32;\n}\n\nsomething_that_does_exist::foo; // ok!\n```\n\nOr:\n\n```\nlet unknown_variable = 12u32;\nlet x = unknown_variable; // ok!\n```\n\nIf the item is not defined in the current module, it must be imported using a\n`use` statement, like so:\n\n```\n# mod foo { pub fn bar() {} }\n# fn main() {\nuse foo::bar;\nbar();\n# }\n```\n\nIf the item you are importing is not defined in some super-module of the\ncurrent module, then it must also be declared as public (e.g., `pub fn`).\n"},"level":"error","spans":[{"file_name":"src\\parser\\mod.rs","byte_start":40878,"byte_end":40881,"line_start":1177,"line_end":1177,"column_start":33,"column_end":36,"is_primary":true,"text":[{"text":"        if self.eat_keyword(kw::Mut) {","highlight_start":33,"highlight_end":36}],"label":"not found in `kw`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"consider importing one of these items","code":null,"level":"help","spans":[{"file_name":"src\\parser\\mod.rs","byte_start":138,"byte_end":138,"line_start":13,"line_end":13,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use crate::lexer::UnmatchedBrace;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use crate::parser::Mutability::Mut;\n","suggestion_applicability":"Unspecified","expansion":null},{"file_name":"src\\parser\\mod.rs","byte_start":138,"byte_end":138,"line_start":13,"line_end":13,"column_start":1,"column_end":1,"is_primary":true,"text":[{"text":"use crate::lexer::UnmatchedBrace;","highlight_start":1,"highlight_end":1}],"label":null,"suggested_replacement":"use rustc_ast::Mutability::Mut;\n","suggestion_applicability":"Unspecified","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0425]\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: cannot find value `Mut` in module `kw`\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\parser\\mod.rs:1177:33\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1177\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m        if self.eat_keyword(kw::Mut) {\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mnot found in `kw`\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: consider importing one of these items\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m13\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[38;5;10muse crate::parser::Mutability::Mut;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m13\u001b[0m\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m\u001b[38;5;10muse rustc_ast::Mutability::Mut;\u001b[0m\n\u001b[0m     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\n"}
{"message":"unused imports: `Async`, `IsAuto`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\parser\\item.rs","byte_start":450,"byte_end":455,"line_start":10,"line_end":10,"column_start":17,"column_end":22,"is_primary":true,"text":[{"text":"use rustc_ast::{Async, Const, Defaultness, IsAuto, Mutability, Unsafe, UseTree, UseTreeKind};","highlight_start":17,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"src\\parser\\item.rs","byte_start":477,"byte_end":483,"line_start":10,"line_end":10,"column_start":44,"column_end":50,"is_primary":true,"text":[{"text":"use rustc_ast::{Async, Const, Defaultness, IsAuto, Mutability, Unsafe, UseTree, UseTreeKind};","highlight_start":44,"highlight_end":50}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the unused imports","code":null,"level":"help","spans":[{"file_name":"src\\parser\\item.rs","byte_start":450,"byte_end":457,"line_start":10,"line_end":10,"column_start":17,"column_end":24,"is_primary":true,"text":[{"text":"use rustc_ast::{Async, Const, Defaultness, IsAuto, Mutability, Unsafe, UseTree, UseTreeKind};","highlight_start":17,"highlight_end":24}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"src\\parser\\item.rs","byte_start":475,"byte_end":483,"line_start":10,"line_end":10,"column_start":42,"column_end":50,"is_primary":true,"text":[{"text":"use rustc_ast::{Async, Const, Defaultness, IsAuto, Mutability, Unsafe, UseTree, UseTreeKind};","highlight_start":42,"highlight_end":50}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused imports: `Async`, `IsAuto`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\parser\\item.rs:10:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0muse rustc_ast::{Async, Const, Defaultness, IsAuto, Mutability, Unsafe, UseTree, UseTreeKind};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^\u001b[0m\u001b[0m                      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m= \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"message":"unused import: `Async`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\parser\\mod.rs","byte_start":751,"byte_end":756,"line_start":28,"line_end":28,"column_start":17,"column_end":22,"is_primary":true,"text":[{"text":"use rustc_ast::{Async, Expr, ExprKind, MacArgs, MacDelimiter, Mutability, StrLit, Unsafe};","highlight_start":17,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src\\parser\\mod.rs","byte_start":751,"byte_end":758,"line_start":28,"line_end":28,"column_start":17,"column_end":24,"is_primary":true,"text":[{"text":"use rustc_ast::{Async, Expr, ExprKind, MacArgs, MacDelimiter, Mutability, StrLit, Unsafe};","highlight_start":17,"highlight_end":24}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `Async`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\parser\\mod.rs:28:17\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m28\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0muse rustc_ast::{Async, Expr, ExprKind, MacArgs, MacDelimiter, Mutability, StrLit, Unsafe};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^\u001b[0m\n\n"}
{"message":"unused import: `crate::lexer::unicode_chars::UNICODE_ARRAY`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\lexer\\mod.rs","byte_start":4,"byte_end":46,"line_start":1,"line_end":1,"column_start":5,"column_end":47,"is_primary":true,"text":[{"text":"use crate::lexer::unicode_chars::UNICODE_ARRAY;","highlight_start":5,"highlight_end":47}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"src\\lexer\\mod.rs","byte_start":0,"byte_end":47,"line_start":1,"line_end":1,"column_start":1,"column_end":48,"is_primary":true,"text":[{"text":"use crate::lexer::unicode_chars::UNICODE_ARRAY;","highlight_start":1,"highlight_end":48}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `crate::lexer::unicode_chars::UNICODE_ARRAY`\u001b[0m\n\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\lexer\\mod.rs:1:5\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m1\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0muse crate::lexer::unicode_chars::UNICODE_ARRAY;\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `RUST_2021_PREFIXES_INCOMPATIBLE_SYNTAX`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\lexer\\mod.rs","byte_start":493,"byte_end":531,"line_start":10,"line_end":10,"column_start":5,"column_end":43,"is_primary":true,"text":[{"text":"    RUST_2021_PREFIXES_INCOMPATIBLE_SYNTAX, TEXT_DIRECTION_CODEPOINT_IN_COMMENT,","highlight_start":5,"highlight_end":43}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src\\lexer\\mod.rs","byte_start":493,"byte_end":533,"line_start":10,"line_end":10,"column_start":5,"column_end":45,"is_primary":true,"text":[{"text":"    RUST_2021_PREFIXES_INCOMPATIBLE_SYNTAX, TEXT_DIRECTION_CODEPOINT_IN_COMMENT,","highlight_start":5,"highlight_end":45}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `RUST_2021_PREFIXES_INCOMPATIBLE_SYNTAX`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\lexer\\mod.rs:10:5\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m10\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    RUST_2021_PREFIXES_INCOMPATIBLE_SYNTAX, TEXT_DIRECTION_CODEPOINT_IN_COMMENT,\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"unused import: `edition::Edition`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"src\\lexer\\mod.rs","byte_start":720,"byte_end":736,"line_start":15,"line_end":15,"column_start":18,"column_end":34,"is_primary":true,"text":[{"text":"use rustc_span::{edition::Edition, BytePos, Pos, Span};","highlight_start":18,"highlight_end":34}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"remove the unused import","code":null,"level":"help","spans":[{"file_name":"src\\lexer\\mod.rs","byte_start":720,"byte_end":738,"line_start":15,"line_end":15,"column_start":18,"column_end":36,"is_primary":true,"text":[{"text":"use rustc_span::{edition::Edition, BytePos, Pos, Span};","highlight_start":18,"highlight_end":36}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;11mwarning\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: unused import: `edition::Edition`\u001b[0m\n\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m--> \u001b[0m\u001b[0msrc\\lexer\\mod.rs:15:18\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14m15\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0muse rustc_span::{edition::Edition, BytePos, Pos, Span};\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;14m| \u001b[0m\u001b[0m                 \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;11m^^^^^^^^^^^^^^^^\u001b[0m\n\n"}
{"message":"aborting due to 21 previous errors; 5 warnings emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m\u001b[38;5;15m: aborting due to 21 previous errors; 5 warnings emitted\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0425`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;15mFor more information about this error, try `rustc --explain E0425`.\u001b[0m\n"}
